
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002ba4  08002ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd0  08002bd0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002bd0  08002bd0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bd0  08002bd0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bd4  08002bd4  00012bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000018  08002bf0  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08002bf0  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000852c  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be9  00000000  00000000  000285b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0002a1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000062b  00000000  00000000  0002a9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000165cc  00000000  00000000  0002aff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000093cb  00000000  00000000  000415bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f23c  00000000  00000000  0004a98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fa4  00000000  00000000  000c9bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000cbb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b8c 	.word	0x08002b8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002b8c 	.word	0x08002b8c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f980 	bl	8000454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f809 	bl	800016a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f880 	bl	800025c <MX_GPIO_Init>
  MX_CRC_Init();
 800015c:	f000 f840 	bl	80001e0 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f852 	bl	8000208 <MX_USART1_UART_Init>

  /* Infinite loop */
  while (1)
  {
	/* USER CODE BEGIN WHILE */
	  Bootloader_Get_Command();
 8000164:	f002 f946 	bl	80023f4 <Bootloader_Get_Command>
 8000168:	e7fc      	b.n	8000164 <main+0x18>

0800016a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016a:	b580      	push	{r7, lr}
 800016c:	b090      	sub	sp, #64	; 0x40
 800016e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	f107 0318 	add.w	r3, r7, #24
 8000174:	2228      	movs	r2, #40	; 0x28
 8000176:	2100      	movs	r1, #0
 8000178:	4618      	mov	r0, r3
 800017a:	f002 fcdb 	bl	8002b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	609a      	str	r2, [r3, #8]
 8000188:	60da      	str	r2, [r3, #12]
 800018a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800018c:	2302      	movs	r3, #2
 800018e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000190:	2301      	movs	r3, #1
 8000192:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000194:	2310      	movs	r3, #16
 8000196:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000198:	2300      	movs	r3, #0
 800019a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800019c:	f107 0318 	add.w	r3, r7, #24
 80001a0:	4618      	mov	r0, r3
 80001a2:	f001 fa5b 	bl	800165c <HAL_RCC_OscConfig>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ac:	f000 f86c 	bl	8000288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001b0:	230f      	movs	r3, #15
 80001b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001b4:	2300      	movs	r3, #0
 80001b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001b8:	2300      	movs	r3, #0
 80001ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001bc:	2300      	movs	r3, #0
 80001be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001c0:	2300      	movs	r3, #0
 80001c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2100      	movs	r1, #0
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fcc9 	bl	8001b60 <HAL_RCC_ClockConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001d4:	f000 f858 	bl	8000288 <Error_Handler>
  }
}
 80001d8:	bf00      	nop
 80001da:	3740      	adds	r7, #64	; 0x40
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}

080001e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <MX_CRC_Init+0x20>)
 80001e6:	4a07      	ldr	r2, [pc, #28]	; (8000204 <MX_CRC_Init+0x24>)
 80001e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80001ea:	4805      	ldr	r0, [pc, #20]	; (8000200 <MX_CRC_Init+0x20>)
 80001ec:	f000 fa91 	bl	8000712 <HAL_CRC_Init>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80001f6:	f000 f847 	bl	8000288 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000034 	.word	0x20000034
 8000204:	40023000 	.word	0x40023000

08000208 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800020e:	4a12      	ldr	r2, [pc, #72]	; (8000258 <MX_USART1_UART_Init+0x50>)
 8000210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000228:	2200      	movs	r2, #0
 800022a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800022e:	220c      	movs	r2, #12
 8000230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000234:	2200      	movs	r2, #0
 8000236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800023a:	2200      	movs	r2, #0
 800023c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000240:	f001 fe1c 	bl	8001e7c <HAL_UART_Init>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800024a:	f000 f81d 	bl	8000288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	2000003c 	.word	0x2000003c
 8000258:	40013800 	.word	0x40013800

0800025c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <MX_GPIO_Init+0x28>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <MX_GPIO_Init+0x28>)
 8000268:	f043 0304 	orr.w	r3, r3, #4
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <MX_GPIO_Init+0x28>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0304 	and.w	r3, r3, #4
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000

08000288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800028c:	b672      	cpsid	i
}
 800028e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000290:	e7fe      	b.n	8000290 <Error_Handler+0x8>
	...

08000294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <HAL_MspInit+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <HAL_MspInit+0x40>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <HAL_MspInit+0x40>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <HAL_MspInit+0x40>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <HAL_MspInit+0x40>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	61d3      	str	r3, [r2, #28]
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <HAL_MspInit+0x40>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000

080002d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a09      	ldr	r2, [pc, #36]	; (800030c <HAL_CRC_MspInit+0x34>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d10b      	bne.n	8000302 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <HAL_CRC_MspInit+0x38>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a08      	ldr	r2, [pc, #32]	; (8000310 <HAL_CRC_MspInit+0x38>)
 80002f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HAL_CRC_MspInit+0x38>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40023000 	.word	0x40023000
 8000310:	40021000 	.word	0x40021000

08000314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031c:	f107 0310 	add.w	r3, r7, #16
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <HAL_UART_MspInit+0x8c>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d131      	bne.n	8000398 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <HAL_UART_MspInit+0x90>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <HAL_UART_MspInit+0x90>)
 800033a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <HAL_UART_MspInit+0x90>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <HAL_UART_MspInit+0x90>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <HAL_UART_MspInit+0x90>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <HAL_UART_MspInit+0x90>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0304 	and.w	r3, r3, #4
 8000360:	60bb      	str	r3, [r7, #8]
 8000362:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000368:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800036a:	2302      	movs	r3, #2
 800036c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800036e:	2303      	movs	r3, #3
 8000370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	4619      	mov	r1, r3
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <HAL_UART_MspInit+0x94>)
 800037a:	f000 ff51 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800037e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000388:	2300      	movs	r3, #0
 800038a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	4619      	mov	r1, r3
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <HAL_UART_MspInit+0x94>)
 8000394:	f000 ff44 	bl	8001220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000398:	bf00      	nop
 800039a:	3720      	adds	r7, #32
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40013800 	.word	0x40013800
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010800 	.word	0x40010800

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <NMI_Handler+0x4>

080003b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <HardFault_Handler+0x4>

080003b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <MemManage_Handler+0x4>

080003be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <BusFault_Handler+0x4>

080003c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <UsageFault_Handler+0x4>

080003ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr

080003d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr

080003e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f2:	f000 f875 	bl	80004e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}

080003fa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
	...

08000408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000408:	f7ff fff7 	bl	80003fa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800040e:	490c      	ldr	r1, [pc, #48]	; (8000440 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000410:	4a0c      	ldr	r2, [pc, #48]	; (8000444 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a09      	ldr	r2, [pc, #36]	; (8000448 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000424:	4c09      	ldr	r4, [pc, #36]	; (800044c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000432:	f002 fb87 	bl	8002b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000436:	f7ff fe89 	bl	800014c <main>
  bx lr
 800043a:	4770      	bx	lr
  ldr r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000440:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000444:	08002bd8 	.word	0x08002bd8
  ldr r2, =_sbss
 8000448:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800044c:	200004c4 	.word	0x200004c4

08000450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000450:	e7fe      	b.n	8000450 <ADC1_2_IRQHandler>
	...

08000454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <HAL_Init+0x28>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <HAL_Init+0x28>)
 800045e:	f043 0310 	orr.w	r3, r3, #16
 8000462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000464:	2003      	movs	r0, #3
 8000466:	f000 f91d 	bl	80006a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800046a:	200f      	movs	r0, #15
 800046c:	f000 f808 	bl	8000480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000470:	f7ff ff10 	bl	8000294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000474:	2300      	movs	r3, #0
}
 8000476:	4618      	mov	r0, r3
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40022000 	.word	0x40022000

08000480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_InitTick+0x54>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_InitTick+0x58>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	4619      	mov	r1, r3
 8000492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000496:	fbb3 f3f1 	udiv	r3, r3, r1
 800049a:	fbb2 f3f3 	udiv	r3, r2, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 f92b 	bl	80006fa <HAL_SYSTICK_Config>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004aa:	2301      	movs	r3, #1
 80004ac:	e00e      	b.n	80004cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d80a      	bhi.n	80004ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004b4:	2200      	movs	r2, #0
 80004b6:	6879      	ldr	r1, [r7, #4]
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004bc:	f000 f8fd 	bl	80006ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004c0:	4a06      	ldr	r2, [pc, #24]	; (80004dc <HAL_InitTick+0x5c>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004c6:	2300      	movs	r3, #0
 80004c8:	e000      	b.n	80004cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004ca:	2301      	movs	r3, #1
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000008 	.word	0x20000008
 80004dc:	20000004 	.word	0x20000004

080004e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <HAL_IncTick+0x1c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_IncTick+0x20>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4413      	add	r3, r2
 80004f0:	4a03      	ldr	r2, [pc, #12]	; (8000500 <HAL_IncTick+0x20>)
 80004f2:	6013      	str	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	20000008 	.word	0x20000008
 8000500:	20000084 	.word	0x20000084

08000504 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  return uwTick;
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <HAL_GetTick+0x10>)
 800050a:	681b      	ldr	r3, [r3, #0]
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	20000084 	.word	0x20000084

08000518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f003 0307 	and.w	r3, r3, #7
 8000526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <__NVIC_SetPriorityGrouping+0x44>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000534:	4013      	ands	r3, r2
 8000536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800054a:	4a04      	ldr	r2, [pc, #16]	; (800055c <__NVIC_SetPriorityGrouping+0x44>)
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	60d3      	str	r3, [r2, #12]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <__NVIC_GetPriorityGrouping+0x18>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	0a1b      	lsrs	r3, r3, #8
 800056a:	f003 0307 	and.w	r3, r3, #7
}
 800056e:	4618      	mov	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058c:	2b00      	cmp	r3, #0
 800058e:	db0a      	blt.n	80005a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	b2da      	uxtb	r2, r3
 8000594:	490c      	ldr	r1, [pc, #48]	; (80005c8 <__NVIC_SetPriority+0x4c>)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	0112      	lsls	r2, r2, #4
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	440b      	add	r3, r1
 80005a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a4:	e00a      	b.n	80005bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4908      	ldr	r1, [pc, #32]	; (80005cc <__NVIC_SetPriority+0x50>)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	f003 030f 	and.w	r3, r3, #15
 80005b2:	3b04      	subs	r3, #4
 80005b4:	0112      	lsls	r2, r2, #4
 80005b6:	b2d2      	uxtb	r2, r2
 80005b8:	440b      	add	r3, r1
 80005ba:	761a      	strb	r2, [r3, #24]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000e100 	.word	0xe000e100
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f003 0307 	and.w	r3, r3, #7
 80005e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	f1c3 0307 	rsb	r3, r3, #7
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	bf28      	it	cs
 80005ee:	2304      	movcs	r3, #4
 80005f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	3304      	adds	r3, #4
 80005f6:	2b06      	cmp	r3, #6
 80005f8:	d902      	bls.n	8000600 <NVIC_EncodePriority+0x30>
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	3b03      	subs	r3, #3
 80005fe:	e000      	b.n	8000602 <NVIC_EncodePriority+0x32>
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	43da      	mvns	r2, r3
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	401a      	ands	r2, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	43d9      	mvns	r1, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	4313      	orrs	r3, r2
         );
}
 800062a:	4618      	mov	r0, r3
 800062c:	3724      	adds	r7, #36	; 0x24
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000638:	f3bf 8f4f 	dsb	sy
}
 800063c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <__NVIC_SystemReset+0x24>)
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000646:	4904      	ldr	r1, [pc, #16]	; (8000658 <__NVIC_SystemReset+0x24>)
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_SystemReset+0x28>)
 800064a:	4313      	orrs	r3, r2
 800064c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <__NVIC_SystemReset+0x20>
 8000658:	e000ed00 	.word	0xe000ed00
 800065c:	05fa0004 	.word	0x05fa0004

08000660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3b01      	subs	r3, #1
 800066c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000670:	d301      	bcc.n	8000676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000672:	2301      	movs	r3, #1
 8000674:	e00f      	b.n	8000696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <SysTick_Config+0x40>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3b01      	subs	r3, #1
 800067c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800067e:	210f      	movs	r1, #15
 8000680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000684:	f7ff ff7a 	bl	800057c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <SysTick_Config+0x40>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068e:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <SysTick_Config+0x40>)
 8000690:	2207      	movs	r2, #7
 8000692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	e000e010 	.word	0xe000e010

080006a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ff33 	bl	8000518 <__NVIC_SetPriorityGrouping>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b086      	sub	sp, #24
 80006be:	af00      	add	r7, sp, #0
 80006c0:	4603      	mov	r3, r0
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
 80006c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006cc:	f7ff ff48 	bl	8000560 <__NVIC_GetPriorityGrouping>
 80006d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	68b9      	ldr	r1, [r7, #8]
 80006d6:	6978      	ldr	r0, [r7, #20]
 80006d8:	f7ff ff7a 	bl	80005d0 <NVIC_EncodePriority>
 80006dc:	4602      	mov	r2, r0
 80006de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff49 	bl	800057c <__NVIC_SetPriority>
}
 80006ea:	bf00      	nop
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80006f6:	f7ff ff9d 	bl	8000634 <__NVIC_SystemReset>

080006fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ffac 	bl	8000660 <SysTick_Config>
 8000708:	4603      	mov	r3, r0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d101      	bne.n	8000724 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	e00e      	b.n	8000742 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	795b      	ldrb	r3, [r3, #5]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2200      	movs	r2, #0
 8000732:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fdcf 	bl	80002d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2201      	movs	r2, #1
 800073e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800074a:	b480      	push	{r7}
 800074c:	b087      	sub	sp, #28
 800074e:	af00      	add	r7, sp, #0
 8000750:	60f8      	str	r0, [r7, #12]
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2202      	movs	r2, #2
 800075e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	e00a      	b.n	800077c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	441a      	add	r2, r3
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6812      	ldr	r2, [r2, #0]
 8000774:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	3301      	adds	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	429a      	cmp	r2, r3
 8000782:	d3f0      	bcc.n	8000766 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2201      	movs	r2, #1
 8000790:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000792:	693b      	ldr	r3, [r7, #16]
}
 8000794:	4618      	mov	r0, r3
 8000796:	371c      	adds	r7, #28
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
	...

080007a0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <HAL_FLASH_Program+0xd8>)
 80007bc:	7e1b      	ldrb	r3, [r3, #24]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d101      	bne.n	80007c6 <HAL_FLASH_Program+0x26>
 80007c2:	2302      	movs	r3, #2
 80007c4:	e054      	b.n	8000870 <HAL_FLASH_Program+0xd0>
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <HAL_FLASH_Program+0xd8>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80007cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007d0:	f000 f8da 	bl	8000988 <FLASH_WaitForLastOperation>
 80007d4:	4603      	mov	r3, r0
 80007d6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d144      	bne.n	8000868 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d102      	bne.n	80007ea <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80007e4:	2301      	movs	r3, #1
 80007e6:	757b      	strb	r3, [r7, #21]
 80007e8:	e007      	b.n	80007fa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d102      	bne.n	80007f6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80007f0:	2302      	movs	r3, #2
 80007f2:	757b      	strb	r3, [r7, #21]
 80007f4:	e001      	b.n	80007fa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80007f6:	2304      	movs	r3, #4
 80007f8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80007fa:	2300      	movs	r3, #0
 80007fc:	75bb      	strb	r3, [r7, #22]
 80007fe:	e02d      	b.n	800085c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000800:	7dbb      	ldrb	r3, [r7, #22]
 8000802:	005a      	lsls	r2, r3, #1
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	eb02 0c03 	add.w	ip, r2, r3
 800080a:	7dbb      	ldrb	r3, [r7, #22]
 800080c:	0119      	lsls	r1, r3, #4
 800080e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000812:	f1c1 0620 	rsb	r6, r1, #32
 8000816:	f1a1 0020 	sub.w	r0, r1, #32
 800081a:	fa22 f401 	lsr.w	r4, r2, r1
 800081e:	fa03 f606 	lsl.w	r6, r3, r6
 8000822:	4334      	orrs	r4, r6
 8000824:	fa23 f000 	lsr.w	r0, r3, r0
 8000828:	4304      	orrs	r4, r0
 800082a:	fa23 f501 	lsr.w	r5, r3, r1
 800082e:	b2a3      	uxth	r3, r4
 8000830:	4619      	mov	r1, r3
 8000832:	4660      	mov	r0, ip
 8000834:	f000 f88c 	bl	8000950 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000838:	f24c 3050 	movw	r0, #50000	; 0xc350
 800083c:	f000 f8a4 	bl	8000988 <FLASH_WaitForLastOperation>
 8000840:	4603      	mov	r3, r0
 8000842:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_FLASH_Program+0xdc>)
 8000846:	691b      	ldr	r3, [r3, #16]
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <HAL_FLASH_Program+0xdc>)
 800084a:	f023 0301 	bic.w	r3, r3, #1
 800084e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000850:	7dfb      	ldrb	r3, [r7, #23]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d107      	bne.n	8000866 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000856:	7dbb      	ldrb	r3, [r7, #22]
 8000858:	3301      	adds	r3, #1
 800085a:	75bb      	strb	r3, [r7, #22]
 800085c:	7dba      	ldrb	r2, [r7, #22]
 800085e:	7d7b      	ldrb	r3, [r7, #21]
 8000860:	429a      	cmp	r2, r3
 8000862:	d3cd      	bcc.n	8000800 <HAL_FLASH_Program+0x60>
 8000864:	e000      	b.n	8000868 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000866:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <HAL_FLASH_Program+0xd8>)
 800086a:	2200      	movs	r2, #0
 800086c:	761a      	strb	r2, [r3, #24]

  return status;
 800086e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000870:	4618      	mov	r0, r3
 8000872:	371c      	adds	r7, #28
 8000874:	46bd      	mov	sp, r7
 8000876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000878:	20000088 	.word	0x20000088
 800087c:	40022000 	.word	0x40022000

08000880 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_FLASH_Unlock+0x40>)
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00d      	beq.n	80008b2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_FLASH_Unlock+0x40>)
 8000898:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_FLASH_Unlock+0x44>)
 800089a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_FLASH_Unlock+0x40>)
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_FLASH_Unlock+0x48>)
 80008a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <HAL_FLASH_Unlock+0x40>)
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80008b2:	79fb      	ldrb	r3, [r7, #7]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40022000 	.word	0x40022000
 80008c4:	45670123 	.word	0x45670123
 80008c8:	cdef89ab 	.word	0xcdef89ab

080008cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_FLASH_Lock+0x1c>)
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_FLASH_Lock+0x1c>)
 80008d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008da:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40022000 	.word	0x40022000

080008ec <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_FLASH_OB_Unlock+0x2c>)
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d107      	bne.n	800090c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_FLASH_OB_Unlock+0x2c>)
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_FLASH_OB_Unlock+0x30>)
 8000900:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_FLASH_OB_Unlock+0x2c>)
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_FLASH_OB_Unlock+0x34>)
 8000906:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8000908:	2300      	movs	r3, #0
 800090a:	e000      	b.n	800090e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40022000 	.word	0x40022000
 800091c:	45670123 	.word	0x45670123
 8000920:	cdef89ab 	.word	0xcdef89ab

08000924 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_FLASH_OB_Lock+0x1c>)
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_FLASH_OB_Lock+0x1c>)
 800092e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000932:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 8000948:	f7ff fed3 	bl	80006f2 <HAL_NVIC_SystemReset>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <FLASH_Program_HalfWord+0x30>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <FLASH_Program_HalfWord+0x34>)
 8000964:	691b      	ldr	r3, [r3, #16]
 8000966:	4a07      	ldr	r2, [pc, #28]	; (8000984 <FLASH_Program_HalfWord+0x34>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	887a      	ldrh	r2, [r7, #2]
 8000972:	801a      	strh	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000088 	.word	0x20000088
 8000984:	40022000 	.word	0x40022000

08000988 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000990:	f7ff fdb8 	bl	8000504 <HAL_GetTick>
 8000994:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000996:	e010      	b.n	80009ba <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800099e:	d00c      	beq.n	80009ba <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d007      	beq.n	80009b6 <FLASH_WaitForLastOperation+0x2e>
 80009a6:	f7ff fdad 	bl	8000504 <HAL_GetTick>
 80009aa:	4602      	mov	r2, r0
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d201      	bcs.n	80009ba <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80009b6:	2303      	movs	r3, #3
 80009b8:	e025      	b.n	8000a06 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <FLASH_WaitForLastOperation+0x88>)
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1e8      	bne.n	8000998 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <FLASH_WaitForLastOperation+0x88>)
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	f003 0320 	and.w	r3, r3, #32
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <FLASH_WaitForLastOperation+0x88>)
 80009d4:	2220      	movs	r2, #32
 80009d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <FLASH_WaitForLastOperation+0x88>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d10b      	bne.n	80009fc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <FLASH_WaitForLastOperation+0x88>)
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d105      	bne.n	80009fc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <FLASH_WaitForLastOperation+0x88>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80009fc:	f000 f80a 	bl	8000a14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	e000      	b.n	8000a06 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40022000 	.word	0x40022000

08000a14 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <FLASH_SetErrorCode+0x98>)
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d009      	beq.n	8000a3e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <FLASH_SetErrorCode+0x9c>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <FLASH_SetErrorCode+0x9c>)
 8000a34:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f043 0310 	orr.w	r3, r3, #16
 8000a3c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <FLASH_SetErrorCode+0x98>)
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d009      	beq.n	8000a5e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <FLASH_SetErrorCode+0x9c>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <FLASH_SetErrorCode+0x9c>)
 8000a54:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <FLASH_SetErrorCode+0x98>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d00b      	beq.n	8000a82 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <FLASH_SetErrorCode+0x9c>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <FLASH_SetErrorCode+0x9c>)
 8000a74:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <FLASH_SetErrorCode+0x98>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <FLASH_SetErrorCode+0x98>)
 8000a7c:	f023 0301 	bic.w	r3, r3, #1
 8000a80:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f240 1201 	movw	r2, #257	; 0x101
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d106      	bne.n	8000a9a <FLASH_SetErrorCode+0x86>
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <FLASH_SetErrorCode+0x98>)
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <FLASH_SetErrorCode+0x98>)
 8000a92:	f023 0301 	bic.w	r3, r3, #1
 8000a96:	61d3      	str	r3, [r2, #28]
}  
 8000a98:	e002      	b.n	8000aa0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <FLASH_SetErrorCode+0x98>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	60d3      	str	r3, [r2, #12]
}  
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40022000 	.word	0x40022000
 8000ab0:	20000088 	.word	0x20000088

08000ab4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <HAL_FLASHEx_Erase+0xd0>)
 8000ac8:	7e1b      	ldrb	r3, [r3, #24]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d101      	bne.n	8000ad2 <HAL_FLASHEx_Erase+0x1e>
 8000ace:	2302      	movs	r3, #2
 8000ad0:	e053      	b.n	8000b7a <HAL_FLASHEx_Erase+0xc6>
 8000ad2:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <HAL_FLASHEx_Erase+0xd0>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d116      	bne.n	8000b0e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ae0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ae4:	f7ff ff50 	bl	8000988 <FLASH_WaitForLastOperation>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d141      	bne.n	8000b72 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f000 f926 	bl	8000d40 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000af4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000af8:	f7ff ff46 	bl	8000988 <FLASH_WaitForLastOperation>
 8000afc:	4603      	mov	r3, r0
 8000afe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_FLASHEx_Erase+0xd4>)
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <HAL_FLASHEx_Erase+0xd4>)
 8000b06:	f023 0304 	bic.w	r3, r3, #4
 8000b0a:	6113      	str	r3, [r2, #16]
 8000b0c:	e031      	b.n	8000b72 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000b0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b12:	f7ff ff39 	bl	8000988 <FLASH_WaitForLastOperation>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d12a      	bne.n	8000b72 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b22:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	e019      	b.n	8000b60 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000b2c:	68b8      	ldr	r0, [r7, #8]
 8000b2e:	f000 fb57 	bl	80011e0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b36:	f7ff ff27 	bl	8000988 <FLASH_WaitForLastOperation>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_FLASHEx_Erase+0xd4>)
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_FLASHEx_Erase+0xd4>)
 8000b44:	f023 0302 	bic.w	r3, r3, #2
 8000b48:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	601a      	str	r2, [r3, #0]
            break;
 8000b56:	e00c      	b.n	8000b72 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b5e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	029a      	lsls	r2, r3, #10
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	68ba      	ldr	r2, [r7, #8]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d3dc      	bcc.n	8000b2c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <HAL_FLASHEx_Erase+0xd0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	761a      	strb	r2, [r3, #24]

  return status;
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000088 	.word	0x20000088
 8000b88:	40022000 	.word	0x40022000

08000b8c <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 8000b92:	23a5      	movs	r3, #165	; 0xa5
 8000b94:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 8000b9a:	f000 faf5 	bl	8001188 <FLASH_OB_GetRDP>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ba2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ba6:	f7ff feef 	bl	8000988 <FLASH_WaitForLastOperation>
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d123      	bne.n	8000bfc <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_FLASHEx_OBErase+0x7c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_FLASHEx_OBErase+0x80>)
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <HAL_FLASHEx_OBErase+0x80>)
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_FLASHEx_OBErase+0x80>)
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_FLASHEx_OBErase+0x80>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bd2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bd6:	f7ff fed7 	bl	8000988 <FLASH_WaitForLastOperation>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_FLASHEx_OBErase+0x80>)
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_FLASHEx_OBErase+0x80>)
 8000be4:	f023 0320 	bic.w	r3, r3, #32
 8000be8:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d105      	bne.n	8000bfc <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fa02 	bl	8000ffc <FLASH_OB_RDP_LevelConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000088 	.word	0x20000088
 8000c0c:	40022000 	.word	0x40022000

08000c10 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c1c:	4b39      	ldr	r3, [pc, #228]	; (8000d04 <HAL_FLASHEx_OBProgram+0xf4>)
 8000c1e:	7e1b      	ldrb	r3, [r3, #24]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_FLASHEx_OBProgram+0x18>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e069      	b.n	8000cfc <HAL_FLASHEx_OBProgram+0xec>
 8000c28:	4b36      	ldr	r3, [pc, #216]	; (8000d04 <HAL_FLASHEx_OBProgram+0xf4>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d01a      	beq.n	8000c70 <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d107      	bne.n	8000c52 <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f896 	bl	8000d78 <FLASH_OB_EnableWRP>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e006      	b.n	8000c60 <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f930 	bl	8000ebc <FLASH_OB_DisableWRP>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <HAL_FLASHEx_OBProgram+0xf4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	761a      	strb	r2, [r3, #24]
      return status;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	e045      	b.n	8000cfc <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00e      	beq.n	8000c9a <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7c1b      	ldrb	r3, [r3, #16]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f9bb 	bl	8000ffc <FLASH_OB_RDP_LevelConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d004      	beq.n	8000c9a <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_FLASHEx_OBProgram+0xf4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	761a      	strb	r2, [r3, #24]
      return status;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	e030      	b.n	8000cfc <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00e      	beq.n	8000cc4 <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7c5b      	ldrb	r3, [r3, #17]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f9f6 	bl	800109c <FLASH_OB_UserConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_FLASHEx_OBProgram+0xf4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	761a      	strb	r2, [r3, #24]
      return status;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	e01b      	b.n	8000cfc <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d011      	beq.n	8000cf4 <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7e1b      	ldrb	r3, [r3, #24]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4610      	mov	r0, r2
 8000cdc:	f000 fa16 	bl	800110c <FLASH_OB_ProgramData>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d004      	beq.n	8000cf4 <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_FLASHEx_OBProgram+0xf4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	761a      	strb	r2, [r3, #24]
      return status;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	e003      	b.n	8000cfc <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_FLASHEx_OBProgram+0xf4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	761a      	strb	r2, [r3, #24]

  return status;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000088 	.word	0x20000088

08000d08 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2207      	movs	r2, #7
 8000d14:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8000d16:	f000 fa2d 	bl	8001174 <FLASH_OB_GetWRP>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8000d20:	f000 fa32 	bl	8001188 <FLASH_OB_GetRDP>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8000d2c:	f000 fa48 	bl	80011c0 <FLASH_OB_GetUser>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	745a      	strb	r2, [r3, #17]
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <FLASH_MassErase+0x30>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <FLASH_MassErase+0x34>)
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <FLASH_MassErase+0x34>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <FLASH_MassErase+0x34>)
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <FLASH_MassErase+0x34>)
 8000d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d64:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	20000088 	.word	0x20000088
 8000d74:	40022000 	.word	0x40022000

08000d78 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8000d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d88:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8000d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d8e:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8000d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d94:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8000d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d9a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8000d9c:	f000 f9ea 	bl	8001174 <FLASH_OB_GetWRP>
 8000da0:	4602      	mov	r2, r0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	4013      	ands	r3, r2
 8000da8:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	0c1b      	lsrs	r3, r3, #16
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	0e1b      	lsrs	r3, r3, #24
 8000dca:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000dd0:	f7ff fdda 	bl	8000988 <FLASH_WaitForLastOperation>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d162      	bne.n	8000ea4 <FLASH_OB_EnableWRP+0x12c>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000dde:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <FLASH_OB_EnableWRP+0x138>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8000de4:	f7ff fed2 	bl	8000b8c <HAL_FLASHEx_OBErase>
 8000de8:	4603      	mov	r3, r0
 8000dea:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d158      	bne.n	8000ea4 <FLASH_OB_EnableWRP+0x12c>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000df2:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <FLASH_OB_EnableWRP+0x13c>)
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <FLASH_OB_EnableWRP+0x13c>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8000dfe:	8abb      	ldrh	r3, [r7, #20]
 8000e00:	2bff      	cmp	r3, #255	; 0xff
 8000e02:	d00d      	beq.n	8000e20 <FLASH_OB_EnableWRP+0xa8>
      {
        OB->WRP0 &= WRP0_Data;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <FLASH_OB_EnableWRP+0x140>)
 8000e06:	891b      	ldrh	r3, [r3, #8]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	492b      	ldr	r1, [pc, #172]	; (8000eb8 <FLASH_OB_EnableWRP+0x140>)
 8000e0c:	8abb      	ldrh	r3, [r7, #20]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e18:	f7ff fdb6 	bl	8000988 <FLASH_WaitForLastOperation>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d110      	bne.n	8000e48 <FLASH_OB_EnableWRP+0xd0>
 8000e26:	8a7b      	ldrh	r3, [r7, #18]
 8000e28:	2bff      	cmp	r3, #255	; 0xff
 8000e2a:	d00d      	beq.n	8000e48 <FLASH_OB_EnableWRP+0xd0>
      {
        OB->WRP1 &= WRP1_Data;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <FLASH_OB_EnableWRP+0x140>)
 8000e2e:	895b      	ldrh	r3, [r3, #10]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4921      	ldr	r1, [pc, #132]	; (8000eb8 <FLASH_OB_EnableWRP+0x140>)
 8000e34:	8a7b      	ldrh	r3, [r7, #18]
 8000e36:	4013      	ands	r3, r2
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e40:	f7ff fda2 	bl	8000988 <FLASH_WaitForLastOperation>
 8000e44:	4603      	mov	r3, r0
 8000e46:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d110      	bne.n	8000e70 <FLASH_OB_EnableWRP+0xf8>
 8000e4e:	8a3b      	ldrh	r3, [r7, #16]
 8000e50:	2bff      	cmp	r3, #255	; 0xff
 8000e52:	d00d      	beq.n	8000e70 <FLASH_OB_EnableWRP+0xf8>
      {
        OB->WRP2 &= WRP2_Data;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <FLASH_OB_EnableWRP+0x140>)
 8000e56:	899b      	ldrh	r3, [r3, #12]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4917      	ldr	r1, [pc, #92]	; (8000eb8 <FLASH_OB_EnableWRP+0x140>)
 8000e5c:	8a3b      	ldrh	r3, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e68:	f7ff fd8e 	bl	8000988 <FLASH_WaitForLastOperation>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d110      	bne.n	8000e98 <FLASH_OB_EnableWRP+0x120>
 8000e76:	89fb      	ldrh	r3, [r7, #14]
 8000e78:	2bff      	cmp	r3, #255	; 0xff
 8000e7a:	d00d      	beq.n	8000e98 <FLASH_OB_EnableWRP+0x120>
      {
        OB->WRP3 &= WRP3_Data;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <FLASH_OB_EnableWRP+0x140>)
 8000e7e:	89db      	ldrh	r3, [r3, #14]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <FLASH_OB_EnableWRP+0x140>)
 8000e84:	89fb      	ldrh	r3, [r7, #14]
 8000e86:	4013      	ands	r3, r2
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e90:	f7ff fd7a 	bl	8000988 <FLASH_WaitForLastOperation>
 8000e94:	4603      	mov	r3, r0
 8000e96:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <FLASH_OB_EnableWRP+0x13c>)
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <FLASH_OB_EnableWRP+0x13c>)
 8000e9e:	f023 0310 	bic.w	r3, r3, #16
 8000ea2:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000088 	.word	0x20000088
 8000eb4:	40022000 	.word	0x40022000
 8000eb8:	1ffff800 	.word	0x1ffff800

08000ebc <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8000ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ecc:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8000ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed2:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8000ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed8:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8000eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ede:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8000ee0:	f000 f948 	bl	8001174 <FLASH_OB_GetWRP>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	0c1b      	lsrs	r3, r3, #16
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	0e1b      	lsrs	r3, r3, #24
 8000f0c:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f12:	f7ff fd39 	bl	8000988 <FLASH_WaitForLastOperation>
 8000f16:	4603      	mov	r3, r0
 8000f18:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d162      	bne.n	8000fe6 <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f20:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <FLASH_OB_DisableWRP+0x134>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8000f26:	f7ff fe31 	bl	8000b8c <HAL_FLASHEx_OBErase>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d158      	bne.n	8000fe6 <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000f34:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <FLASH_OB_DisableWRP+0x138>)
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	4a2e      	ldr	r2, [pc, #184]	; (8000ff4 <FLASH_OB_DisableWRP+0x138>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8000f40:	8abb      	ldrh	r3, [r7, #20]
 8000f42:	2bff      	cmp	r3, #255	; 0xff
 8000f44:	d00d      	beq.n	8000f62 <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 8000f46:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <FLASH_OB_DisableWRP+0x13c>)
 8000f48:	891b      	ldrh	r3, [r3, #8]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	492a      	ldr	r1, [pc, #168]	; (8000ff8 <FLASH_OB_DisableWRP+0x13c>)
 8000f4e:	8abb      	ldrh	r3, [r7, #20]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f5a:	f7ff fd15 	bl	8000988 <FLASH_WaitForLastOperation>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d110      	bne.n	8000f8a <FLASH_OB_DisableWRP+0xce>
 8000f68:	8a7b      	ldrh	r3, [r7, #18]
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d00d      	beq.n	8000f8a <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 8000f6e:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <FLASH_OB_DisableWRP+0x13c>)
 8000f70:	895b      	ldrh	r3, [r3, #10]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4920      	ldr	r1, [pc, #128]	; (8000ff8 <FLASH_OB_DisableWRP+0x13c>)
 8000f76:	8a7b      	ldrh	r3, [r7, #18]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f82:	f7ff fd01 	bl	8000988 <FLASH_WaitForLastOperation>
 8000f86:	4603      	mov	r3, r0
 8000f88:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d110      	bne.n	8000fb2 <FLASH_OB_DisableWRP+0xf6>
 8000f90:	8a3b      	ldrh	r3, [r7, #16]
 8000f92:	2bff      	cmp	r3, #255	; 0xff
 8000f94:	d00d      	beq.n	8000fb2 <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <FLASH_OB_DisableWRP+0x13c>)
 8000f98:	899b      	ldrh	r3, [r3, #12]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4916      	ldr	r1, [pc, #88]	; (8000ff8 <FLASH_OB_DisableWRP+0x13c>)
 8000f9e:	8a3b      	ldrh	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fa6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000faa:	f7ff fced 	bl	8000988 <FLASH_WaitForLastOperation>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d110      	bne.n	8000fda <FLASH_OB_DisableWRP+0x11e>
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	2bff      	cmp	r3, #255	; 0xff
 8000fbc:	d00d      	beq.n	8000fda <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <FLASH_OB_DisableWRP+0x13c>)
 8000fc0:	89db      	ldrh	r3, [r3, #14]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <FLASH_OB_DisableWRP+0x13c>)
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fce:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fd2:	f7ff fcd9 	bl	8000988 <FLASH_WaitForLastOperation>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <FLASH_OB_DisableWRP+0x138>)
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <FLASH_OB_DisableWRP+0x138>)
 8000fe0:	f023 0310 	bic.w	r3, r3, #16
 8000fe4:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000088 	.word	0x20000088
 8000ff4:	40022000 	.word	0x40022000
 8000ff8:	1ffff800 	.word	0x1ffff800

08000ffc <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800100a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800100e:	f7ff fcbb 	bl	8000988 <FLASH_WaitForLastOperation>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d133      	bne.n	8001084 <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <FLASH_OB_RDP_LevelConfig+0x94>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001038:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800103a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800103e:	f7ff fca3 	bl	8000988 <FLASH_WaitForLastOperation>
 8001042:	4603      	mov	r3, r0
 8001044:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <FLASH_OB_RDP_LevelConfig+0x98>)
 800104c:	f023 0320 	bic.w	r3, r3, #32
 8001050:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d115      	bne.n	8001084 <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <FLASH_OB_RDP_LevelConfig+0x98>)
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <FLASH_OB_RDP_LevelConfig+0x98>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <FLASH_OB_RDP_LevelConfig+0x9c>)
 8001066:	79fa      	ldrb	r2, [r7, #7]
 8001068:	b292      	uxth	r2, r2
 800106a:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 800106c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001070:	f7ff fc8a 	bl	8000988 <FLASH_WaitForLastOperation>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <FLASH_OB_RDP_LevelConfig+0x98>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	4a05      	ldr	r2, [pc, #20]	; (8001094 <FLASH_OB_RDP_LevelConfig+0x98>)
 800107e:	f023 0310 	bic.w	r3, r3, #16
 8001082:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000088 	.word	0x20000088
 8001094:	40022000 	.word	0x40022000
 8001098:	1ffff800 	.word	0x1ffff800

0800109c <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010ae:	f7ff fc6b 	bl	8000988 <FLASH_WaitForLastOperation>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d11b      	bne.n	80010f4 <FLASH_OB_UserConfig+0x58>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <FLASH_OB_UserConfig+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <FLASH_OB_UserConfig+0x68>)
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <FLASH_OB_UserConfig+0x68>)
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f063 0377 	orn	r3, r3, #119	; 0x77
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <FLASH_OB_UserConfig+0x6c>)
 80010d8:	b292      	uxth	r2, r2
 80010da:	805a      	strh	r2, [r3, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010e0:	f7ff fc52 	bl	8000988 <FLASH_WaitForLastOperation>
 80010e4:	4603      	mov	r3, r0
 80010e6:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <FLASH_OB_UserConfig+0x68>)
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	4a05      	ldr	r2, [pc, #20]	; (8001104 <FLASH_OB_UserConfig+0x68>)
 80010ee:	f023 0310 	bic.w	r3, r3, #16
 80010f2:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000088 	.word	0x20000088
 8001104:	40022000 	.word	0x40022000
 8001108:	1ffff800 	.word	0x1ffff800

0800110c <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800111c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001120:	f7ff fc32 	bl	8000988 <FLASH_WaitForLastOperation>
 8001124:	4603      	mov	r3, r0
 8001126:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d118      	bne.n	8001160 <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <FLASH_OB_ProgramData+0x60>)
 8001130:	2200      	movs	r2, #0
 8001132:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <FLASH_OB_ProgramData+0x64>)
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <FLASH_OB_ProgramData+0x64>)
 800113a:	f043 0310 	orr.w	r3, r3, #16
 800113e:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	78fa      	ldrb	r2, [r7, #3]
 8001144:	b292      	uxth	r2, r2
 8001146:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001148:	f24c 3050 	movw	r0, #50000	; 0xc350
 800114c:	f7ff fc1c 	bl	8000988 <FLASH_WaitForLastOperation>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <FLASH_OB_ProgramData+0x64>)
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	4a05      	ldr	r2, [pc, #20]	; (8001170 <FLASH_OB_ProgramData+0x64>)
 800115a:	f023 0310 	bic.w	r3, r3, #16
 800115e:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000088 	.word	0x20000088
 8001170:	40022000 	.word	0x40022000

08001174 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8001178:	4b02      	ldr	r3, [pc, #8]	; (8001184 <FLASH_OB_GetWRP+0x10>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40022000 	.word	0x40022000

08001188 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 800118e:	23a5      	movs	r3, #165	; 0xa5
 8001190:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <FLASH_OB_GetRDP+0x34>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d102      	bne.n	80011ac <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	e001      	b.n	80011b0 <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 80011ac:	23a5      	movs	r3, #165	; 0xa5
 80011ae:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 80011b0:	687b      	ldr	r3, [r7, #4]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40022000 	.word	0x40022000

080011c0 <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <FLASH_OB_GetUser+0x1c>)
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	b2db      	uxtb	r3, r3
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <FLASH_PageErase+0x38>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <FLASH_PageErase+0x3c>)
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <FLASH_PageErase+0x3c>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <FLASH_PageErase+0x3c>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <FLASH_PageErase+0x3c>)
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	4a05      	ldr	r2, [pc, #20]	; (800121c <FLASH_PageErase+0x3c>)
 8001206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000088 	.word	0x20000088
 800121c:	40022000 	.word	0x40022000

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	e169      	b.n	8001508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001234:	2201      	movs	r2, #1
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8158 	bne.w	8001502 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a9a      	ldr	r2, [pc, #616]	; (80014c0 <HAL_GPIO_Init+0x2a0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d05e      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800125c:	4a98      	ldr	r2, [pc, #608]	; (80014c0 <HAL_GPIO_Init+0x2a0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d875      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001262:	4a98      	ldr	r2, [pc, #608]	; (80014c4 <HAL_GPIO_Init+0x2a4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d058      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001268:	4a96      	ldr	r2, [pc, #600]	; (80014c4 <HAL_GPIO_Init+0x2a4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d86f      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800126e:	4a96      	ldr	r2, [pc, #600]	; (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d052      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001274:	4a94      	ldr	r2, [pc, #592]	; (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d869      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800127a:	4a94      	ldr	r2, [pc, #592]	; (80014cc <HAL_GPIO_Init+0x2ac>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d04c      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001280:	4a92      	ldr	r2, [pc, #584]	; (80014cc <HAL_GPIO_Init+0x2ac>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d863      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001286:	4a92      	ldr	r2, [pc, #584]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d046      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800128c:	4a90      	ldr	r2, [pc, #576]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d85d      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d82a      	bhi.n	80012ec <HAL_GPIO_Init+0xcc>
 8001296:	2b12      	cmp	r3, #18
 8001298:	d859      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <HAL_GPIO_Init+0x80>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	0800131b 	.word	0x0800131b
 80012a4:	080012f5 	.word	0x080012f5
 80012a8:	08001307 	.word	0x08001307
 80012ac:	08001349 	.word	0x08001349
 80012b0:	0800134f 	.word	0x0800134f
 80012b4:	0800134f 	.word	0x0800134f
 80012b8:	0800134f 	.word	0x0800134f
 80012bc:	0800134f 	.word	0x0800134f
 80012c0:	0800134f 	.word	0x0800134f
 80012c4:	0800134f 	.word	0x0800134f
 80012c8:	0800134f 	.word	0x0800134f
 80012cc:	0800134f 	.word	0x0800134f
 80012d0:	0800134f 	.word	0x0800134f
 80012d4:	0800134f 	.word	0x0800134f
 80012d8:	0800134f 	.word	0x0800134f
 80012dc:	0800134f 	.word	0x0800134f
 80012e0:	0800134f 	.word	0x0800134f
 80012e4:	080012fd 	.word	0x080012fd
 80012e8:	08001311 	.word	0x08001311
 80012ec:	4a79      	ldr	r2, [pc, #484]	; (80014d4 <HAL_GPIO_Init+0x2b4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012f2:	e02c      	b.n	800134e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	623b      	str	r3, [r7, #32]
          break;
 80012fa:	e029      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	3304      	adds	r3, #4
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e024      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	3308      	adds	r3, #8
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e01f      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	330c      	adds	r3, #12
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e01a      	b.n	8001350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001322:	2304      	movs	r3, #4
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e013      	b.n	8001350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001330:	2308      	movs	r3, #8
 8001332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	611a      	str	r2, [r3, #16]
          break;
 800133a:	e009      	b.n	8001350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	615a      	str	r2, [r3, #20]
          break;
 8001346:	e003      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x130>
          break;
 800134e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2bff      	cmp	r3, #255	; 0xff
 8001354:	d801      	bhi.n	800135a <HAL_GPIO_Init+0x13a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	e001      	b.n	800135e <HAL_GPIO_Init+0x13e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3304      	adds	r3, #4
 800135e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2bff      	cmp	r3, #255	; 0xff
 8001364:	d802      	bhi.n	800136c <HAL_GPIO_Init+0x14c>
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_Init+0x152>
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	3b08      	subs	r3, #8
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	210f      	movs	r1, #15
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	401a      	ands	r2, r3
 8001384:	6a39      	ldr	r1, [r7, #32]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	431a      	orrs	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80b1 	beq.w	8001502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a0:	4b4d      	ldr	r3, [pc, #308]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b8:	4a48      	ldr	r2, [pc, #288]	; (80014dc <HAL_GPIO_Init+0x2bc>)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a40      	ldr	r2, [pc, #256]	; (80014e0 <HAL_GPIO_Init+0x2c0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_Init+0x1ec>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <HAL_GPIO_Init+0x2c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1e8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3e      	ldr	r2, [pc, #248]	; (80014e8 <HAL_GPIO_Init+0x2c8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1e4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a3d      	ldr	r2, [pc, #244]	; (80014ec <HAL_GPIO_Init+0x2cc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1e0>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001400:	2304      	movs	r3, #4
 8001402:	e004      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001404:	2302      	movs	r3, #2
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 800140c:	2300      	movs	r3, #0
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	f002 0203 	and.w	r2, r2, #3
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4093      	lsls	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800141e:	492f      	ldr	r1, [pc, #188]	; (80014dc <HAL_GPIO_Init+0x2bc>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	492c      	ldr	r1, [pc, #176]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	608b      	str	r3, [r1, #8]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	4928      	ldr	r1, [pc, #160]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	4922      	ldr	r1, [pc, #136]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	60cb      	str	r3, [r1, #12]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	491e      	ldr	r1, [pc, #120]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4918      	ldr	r1, [pc, #96]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4914      	ldr	r1, [pc, #80]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d021      	beq.n	80014f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	490e      	ldr	r1, [pc, #56]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e021      	b.n	8001502 <HAL_GPIO_Init+0x2e2>
 80014be:	bf00      	nop
 80014c0:	10320000 	.word	0x10320000
 80014c4:	10310000 	.word	0x10310000
 80014c8:	10220000 	.word	0x10220000
 80014cc:	10210000 	.word	0x10210000
 80014d0:	10120000 	.word	0x10120000
 80014d4:	10110000 	.word	0x10110000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40011400 	.word	0x40011400
 80014f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_GPIO_Init+0x304>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4909      	ldr	r1, [pc, #36]	; (8001524 <HAL_GPIO_Init+0x304>)
 80014fe:	4013      	ands	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	3301      	adds	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f ae8e 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	; 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800152e:	f7fe ffe9 	bl	8000504 <HAL_GetTick>
 8001532:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <HAL_RCC_DeInit+0x124>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a44      	ldr	r2, [pc, #272]	; (800164c <HAL_RCC_DeInit+0x124>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001542:	f7fe ffdf 	bl	8000504 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e077      	b.n	8001644 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <HAL_RCC_DeInit+0x124>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001560:	4b3a      	ldr	r3, [pc, #232]	; (800164c <HAL_RCC_DeInit+0x124>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001568:	4a38      	ldr	r2, [pc, #224]	; (800164c <HAL_RCC_DeInit+0x124>)
 800156a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001570:	f7fe ffc8 	bl	8000504 <HAL_GetTick>
 8001574:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001576:	4b35      	ldr	r3, [pc, #212]	; (800164c <HAL_RCC_DeInit+0x124>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157e:	f7fe ffc1 	bl	8000504 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e057      	b.n	8001644 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HAL_RCC_DeInit+0x124>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1ee      	bne.n	800157e <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <HAL_RCC_DeInit+0x128>)
 80015a2:	4a2c      	ldr	r2, [pc, #176]	; (8001654 <HAL_RCC_DeInit+0x12c>)
 80015a4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <HAL_RCC_DeInit+0x130>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff68 	bl	8000480 <HAL_InitTick>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e044      	b.n	8001644 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80015ba:	f7fe ffa3 	bl	8000504 <HAL_GetTick>
 80015be:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_RCC_DeInit+0x124>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a21      	ldr	r2, [pc, #132]	; (800164c <HAL_RCC_DeInit+0x124>)
 80015c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ca:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ce:	f7fe ff99 	bl	8000504 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e031      	b.n	8001644 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_RCC_DeInit+0x124>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_RCC_DeInit+0x124>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80015f2:	f7fe ff87 	bl	8000504 <HAL_GetTick>
 80015f6:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_RCC_DeInit+0x124>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <HAL_RCC_DeInit+0x124>)
 80015fe:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001602:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001606:	f7fe ff7d 	bl	8000504 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b64      	cmp	r3, #100	; 0x64
 8001612:	d901      	bls.n	8001618 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e015      	b.n	8001644 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_RCC_DeInit+0x124>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f0      	bne.n	8001606 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_DeInit+0x124>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_RCC_DeInit+0x124>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_DeInit+0x124>)
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	4a05      	ldr	r2, [pc, #20]	; (800164c <HAL_RCC_DeInit+0x124>)
 8001636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800163a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_RCC_DeInit+0x124>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	20000000 	.word	0x20000000
 8001654:	007a1200 	.word	0x007a1200
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e272      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8087 	beq.w	800178a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800167c:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b04      	cmp	r3, #4
 8001686:	d00c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001688:	4b8f      	ldr	r3, [pc, #572]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d112      	bne.n	80016ba <HAL_RCC_OscConfig+0x5e>
 8001694:	4b8c      	ldr	r3, [pc, #560]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a0:	d10b      	bne.n	80016ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d06c      	beq.n	8001788 <HAL_RCC_OscConfig+0x12c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d168      	bne.n	8001788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e24c      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x76>
 80016c4:	4b80      	ldr	r3, [pc, #512]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a7f      	ldr	r2, [pc, #508]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e02e      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x98>
 80016da:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a7a      	ldr	r2, [pc, #488]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b78      	ldr	r3, [pc, #480]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a77      	ldr	r2, [pc, #476]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e01d      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0xbc>
 80016fe:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a71      	ldr	r2, [pc, #452]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6e      	ldr	r2, [pc, #440]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 8001718:	4b6b      	ldr	r3, [pc, #428]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a6a      	ldr	r2, [pc, #424]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a67      	ldr	r2, [pc, #412]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7fe fee4 	bl	8000504 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7fe fee0 	bl	8000504 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e200      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0xe4>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7fe fed0 	bl	8000504 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7fe fecc 	bl	8000504 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1ec      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x10c>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d063      	beq.n	800185e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001796:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017a2:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d11c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x18c>
 80017ae:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x176>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1c0      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4939      	ldr	r1, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	e03a      	b.n	800185e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7fe fe85 	bl	8000504 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fe:	f7fe fe81 	bl	8000504 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1a1      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4927      	ldr	r1, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7fe fe64 	bl	8000504 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001840:	f7fe fe60 	bl	8000504 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e180      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d03a      	beq.n	80018e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d019      	beq.n	80018a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7fe fe44 	bl	8000504 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7fe fe40 	bl	8000504 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e160      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800189e:	2001      	movs	r0, #1
 80018a0:	f000 face 	bl	8001e40 <RCC_Delay>
 80018a4:	e01c      	b.n	80018e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ac:	f7fe fe2a 	bl	8000504 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b2:	e00f      	b.n	80018d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7fe fe26 	bl	8000504 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d908      	bls.n	80018d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e146      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	42420000 	.word	0x42420000
 80018d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d4:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e9      	bne.n	80018b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80a6 	beq.w	8001a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f2:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a87      	ldr	r2, [pc, #540]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b85      	ldr	r3, [pc, #532]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b82      	ldr	r3, [pc, #520]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d118      	bne.n	8001958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001926:	4b7f      	ldr	r3, [pc, #508]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7e      	ldr	r2, [pc, #504]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001932:	f7fe fde7 	bl	8000504 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7fe fde3 	bl	8000504 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b64      	cmp	r3, #100	; 0x64
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e103      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4b75      	ldr	r3, [pc, #468]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x312>
 8001960:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	e02d      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x334>
 8001976:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a69      	ldr	r2, [pc, #420]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a66      	ldr	r2, [pc, #408]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f023 0304 	bic.w	r3, r3, #4
 800198c:	6213      	str	r3, [r2, #32]
 800198e:	e01c      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b05      	cmp	r3, #5
 8001996:	d10c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x356>
 8001998:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4a60      	ldr	r2, [pc, #384]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6213      	str	r3, [r2, #32]
 80019a4:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a5d      	ldr	r2, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	e00b      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 80019b2:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a5a      	ldr	r2, [pc, #360]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a57      	ldr	r2, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d015      	beq.n	80019fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7fe fd97 	bl	8000504 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7fe fd93 	bl	8000504 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0b1      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ee      	beq.n	80019da <HAL_RCC_OscConfig+0x37e>
 80019fc:	e014      	b.n	8001a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7fe fd81 	bl	8000504 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7fe fd7d 	bl	8000504 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e09b      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ee      	bne.n	8001a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a3b      	ldr	r2, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8087 	beq.w	8001b52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a44:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d061      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d146      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <HAL_RCC_OscConfig+0x4cc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7fe fd51 	bl	8000504 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7fe fd4d 	bl	8000504 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e06d      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d108      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	4921      	ldr	r1, [pc, #132]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a19      	ldr	r1, [r3, #32]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	491b      	ldr	r1, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x4cc>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7fe fd21 	bl	8000504 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7fe fd1d 	bl	8000504 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e03d      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x46a>
 8001ae4:	e035      	b.n	8001b52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_RCC_OscConfig+0x4cc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7fe fd0a 	bl	8000504 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7fe fd06 	bl	8000504 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e026      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x498>
 8001b12:	e01e      	b.n	8001b52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e019      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40007000 	.word	0x40007000
 8001b28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_OscConfig+0x500>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0d0      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d910      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 0207 	bic.w	r2, r3, #7
 8001b8a:	4965      	ldr	r1, [pc, #404]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0b8      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d020      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	494d      	ldr	r1, [pc, #308]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d040      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d115      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e07f      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e073      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e06b      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3e:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4936      	ldr	r1, [pc, #216]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c50:	f7fe fc58 	bl	8000504 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7fe fc54 	bl	8000504 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e053      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 020c 	and.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1eb      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d210      	bcs.n	8001cb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 0207 	bic.w	r2, r3, #7
 8001c96:	4922      	ldr	r1, [pc, #136]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e032      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4916      	ldr	r1, [pc, #88]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	490e      	ldr	r1, [pc, #56]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cee:	f000 f821 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	490a      	ldr	r1, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x1c8>)
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	fa22 f303 	lsr.w	r3, r2, r3
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1cc>)
 8001d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x1d0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fbb6 	bl	8000480 <HAL_InitTick>

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40022000 	.word	0x40022000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08002ba4 	.word	0x08002ba4
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004

08001d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d002      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x30>
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d003      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x36>
 8001d62:	e027      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001d66:	613b      	str	r3, [r7, #16]
      break;
 8001d68:	e027      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	0c9b      	lsrs	r3, r3, #18
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d010      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0c5b      	lsrs	r3, r3, #17
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001d96:	fb03 f202 	mul.w	r2, r3, r2
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e004      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001da8:	fb02 f303 	mul.w	r3, r2, r3
 8001dac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	613b      	str	r3, [r7, #16]
      break;
 8001db2:	e002      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001db6:	613b      	str	r3, [r7, #16]
      break;
 8001db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dba:	693b      	ldr	r3, [r7, #16]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	007a1200 	.word	0x007a1200
 8001dd0:	08002bbc 	.word	0x08002bbc
 8001dd4:	08002bcc 	.word	0x08002bcc
 8001dd8:	003d0900 	.word	0x003d0900

08001ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <HAL_RCC_GetHCLKFreq+0x10>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df4:	f7ff fff2 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08002bb4 	.word	0x08002bb4

08001e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e1c:	f7ff ffde 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	0adb      	lsrs	r3, r3, #11
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08002bb4 	.word	0x08002bb4

08001e40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <RCC_Delay+0x34>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <RCC_Delay+0x38>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0a5b      	lsrs	r3, r3, #9
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e5c:	bf00      	nop
  }
  while (Delay --);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	60fa      	str	r2, [r7, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f9      	bne.n	8001e5c <RCC_Delay+0x1c>
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	20000000 	.word	0x20000000
 8001e78:	10624dd3 	.word	0x10624dd3

08001e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e042      	b.n	8001f14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe fa36 	bl	8000314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2224      	movs	r2, #36	; 0x24
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fa09 	bl	80022d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d175      	bne.n	8002028 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <HAL_UART_Transmit+0x2c>
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e06e      	b.n	800202a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2221      	movs	r2, #33	; 0x21
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f5a:	f7fe fad3 	bl	8000504 <HAL_GetTick>
 8001f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	88fa      	ldrh	r2, [r7, #6]
 8001f64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	88fa      	ldrh	r2, [r7, #6]
 8001f6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f74:	d108      	bne.n	8001f88 <HAL_UART_Transmit+0x6c>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d104      	bne.n	8001f88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	e003      	b.n	8001f90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f90:	e02e      	b.n	8001ff0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f8df 	bl	8002160 <UART_WaitOnFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e03a      	b.n	800202a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	3302      	adds	r3, #2
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	e007      	b.n	8001fe2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1cb      	bne.n	8001f92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2200      	movs	r2, #0
 8002002:	2140      	movs	r1, #64	; 0x40
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f8ab 	bl	8002160 <UART_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e006      	b.n	800202a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	e000      	b.n	800202a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3720      	adds	r7, #32
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b08a      	sub	sp, #40	; 0x28
 8002036:	af02      	add	r7, sp, #8
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4613      	mov	r3, r2
 8002040:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	f040 8081 	bne.w	8002156 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_UART_Receive+0x2e>
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e079      	b.n	8002158 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2222      	movs	r2, #34	; 0x22
 800206e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002078:	f7fe fa44 	bl	8000504 <HAL_GetTick>
 800207c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	88fa      	ldrh	r2, [r7, #6]
 8002082:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	88fa      	ldrh	r2, [r7, #6]
 8002088:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002092:	d108      	bne.n	80020a6 <HAL_UART_Receive+0x74>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d104      	bne.n	80020a6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	e003      	b.n	80020ae <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80020ae:	e047      	b.n	8002140 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2120      	movs	r1, #32
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f850 	bl	8002160 <UART_WaitOnFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e042      	b.n	8002158 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10c      	bne.n	80020f2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	3302      	adds	r3, #2
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e01f      	b.n	8002132 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fa:	d007      	beq.n	800210c <HAL_UART_Receive+0xda>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <HAL_UART_Receive+0xe8>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d106      	bne.n	800211a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e008      	b.n	800212c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002126:	b2da      	uxtb	r2, r3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	3301      	adds	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1b2      	bne.n	80020b0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002156:	2302      	movs	r3, #2
  }
}
 8002158:	4618      	mov	r0, r3
 800215a:	3720      	adds	r7, #32
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002170:	e03b      	b.n	80021ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002178:	d037      	beq.n	80021ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217a:	f7fe f9c3 	bl	8000504 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	6a3a      	ldr	r2, [r7, #32]
 8002186:	429a      	cmp	r2, r3
 8002188:	d302      	bcc.n	8002190 <UART_WaitOnFlagUntilTimeout+0x30>
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e03a      	b.n	800220a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d023      	beq.n	80021ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	d020      	beq.n	80021ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b40      	cmp	r3, #64	; 0x40
 80021ac:	d01d      	beq.n	80021ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d116      	bne.n	80021ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f81d 	bl	8002212 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2208      	movs	r2, #8
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4013      	ands	r3, r2
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	429a      	cmp	r2, r3
 8002206:	d0b4      	beq.n	8002172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002212:	b480      	push	{r7}
 8002214:	b095      	sub	sp, #84	; 0x54
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	330c      	adds	r3, #12
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002224:	e853 3f00 	ldrex	r3, [r3]
 8002228:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002230:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	330c      	adds	r3, #12
 8002238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800223a:	643a      	str	r2, [r7, #64]	; 0x40
 800223c:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002242:	e841 2300 	strex	r3, r2, [r1]
 8002246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1e5      	bne.n	800221a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3314      	adds	r3, #20
 8002254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	e853 3f00 	ldrex	r3, [r3]
 800225c:	61fb      	str	r3, [r7, #28]
   return(result);
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	64bb      	str	r3, [r7, #72]	; 0x48
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3314      	adds	r3, #20
 800226c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800226e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002276:	e841 2300 	strex	r3, r2, [r1]
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e5      	bne.n	800224e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	2b01      	cmp	r3, #1
 8002288:	d119      	bne.n	80022be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	330c      	adds	r3, #12
 8002290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	e853 3f00 	ldrex	r3, [r3]
 8002298:	60bb      	str	r3, [r7, #8]
   return(result);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f023 0310 	bic.w	r3, r3, #16
 80022a0:	647b      	str	r3, [r7, #68]	; 0x44
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	330c      	adds	r3, #12
 80022a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022aa:	61ba      	str	r2, [r7, #24]
 80022ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ae:	6979      	ldr	r1, [r7, #20]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	e841 2300 	strex	r3, r2, [r1]
 80022b6:	613b      	str	r3, [r7, #16]
   return(result);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1e5      	bne.n	800228a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022cc:	bf00      	nop
 80022ce:	3754      	adds	r7, #84	; 0x54
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
	...

080022d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002312:	f023 030c 	bic.w	r3, r3, #12
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	430b      	orrs	r3, r1
 800231e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a2c      	ldr	r2, [pc, #176]	; (80023ec <UART_SetConfig+0x114>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d103      	bne.n	8002348 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002340:	f7ff fd6a 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	e002      	b.n	800234e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002348:	f7ff fd52 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 800234c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	009a      	lsls	r2, r3, #2
 8002358:	441a      	add	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <UART_SetConfig+0x118>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	0119      	lsls	r1, r3, #4
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	009a      	lsls	r2, r3, #2
 8002378:	441a      	add	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	fbb2 f2f3 	udiv	r2, r2, r3
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <UART_SetConfig+0x118>)
 8002386:	fba3 0302 	umull	r0, r3, r3, r2
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2064      	movs	r0, #100	; 0x64
 800238e:	fb00 f303 	mul.w	r3, r0, r3
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	3332      	adds	r3, #50	; 0x32
 8002398:	4a15      	ldr	r2, [pc, #84]	; (80023f0 <UART_SetConfig+0x118>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a4:	4419      	add	r1, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009a      	lsls	r2, r3, #2
 80023b0:	441a      	add	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <UART_SetConfig+0x118>)
 80023be:	fba3 0302 	umull	r0, r3, r3, r2
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2064      	movs	r0, #100	; 0x64
 80023c6:	fb00 f303 	mul.w	r3, r0, r3
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	3332      	adds	r3, #50	; 0x32
 80023d0:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <UART_SetConfig+0x118>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	f003 020f 	and.w	r2, r3, #15
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	440a      	add	r2, r1
 80023e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40013800 	.word	0x40013800
 80023f0:	51eb851f 	.word	0x51eb851f

080023f4 <Bootloader_Get_Command>:
* @param [out] - None
* @retval - BL_Status (Bootloader operation status: BL_OK or BL_Error)
* Note- It receives the command and data from UART, parses the command, and executes the corresponding bootloader action.
*/
BL_Status Bootloader_Get_Command()
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
	memset(BL_Buffer, 0, BL_BUFFER_LENGTH);
 80023fa:	f240 421a 	movw	r2, #1050	; 0x41a
 80023fe:	2100      	movs	r1, #0
 8002400:	484a      	ldr	r0, [pc, #296]	; (800252c <Bootloader_Get_Command+0x138>)
 8002402:	f000 fb97 	bl	8002b34 <memset>
	BL_Status bl_status = BL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73bb      	strb	r3, [r7, #14]
    uint8_t CRC_ver_status = CRC_VERIFICATION_FAILED;
 800240e:	2300      	movs	r3, #0
 8002410:	737b      	strb	r3, [r7, #13]

	HAL_Status = HAL_UART_Receive(BL_UART, BL_Buffer, 2, BL_MAX_TIMEOUT);
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <Bootloader_Get_Command+0x13c>)
 8002414:	2202      	movs	r2, #2
 8002416:	4945      	ldr	r1, [pc, #276]	; (800252c <Bootloader_Get_Command+0x138>)
 8002418:	4846      	ldr	r0, [pc, #280]	; (8002534 <Bootloader_Get_Command+0x140>)
 800241a:	f7ff fe0a 	bl	8002032 <HAL_UART_Receive>
 800241e:	4603      	mov	r3, r0
 8002420:	73bb      	strb	r3, [r7, #14]
	if(HAL_Status == HAL_OK)
 8002422:	7bbb      	ldrb	r3, [r7, #14]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d17a      	bne.n	800251e <Bootloader_Get_Command+0x12a>
	{
		uint16_t data_length = *((uint16_t*)BL_Buffer);
 8002428:	4b40      	ldr	r3, [pc, #256]	; (800252c <Bootloader_Get_Command+0x138>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	817b      	strh	r3, [r7, #10]
		HAL_Status = HAL_UART_Receive(BL_UART, BL_Buffer + 2, data_length, BL_MAX_TIMEOUT);
 800242e:	4942      	ldr	r1, [pc, #264]	; (8002538 <Bootloader_Get_Command+0x144>)
 8002430:	897a      	ldrh	r2, [r7, #10]
 8002432:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <Bootloader_Get_Command+0x13c>)
 8002434:	483f      	ldr	r0, [pc, #252]	; (8002534 <Bootloader_Get_Command+0x140>)
 8002436:	f7ff fdfc 	bl	8002032 <HAL_UART_Receive>
 800243a:	4603      	mov	r3, r0
 800243c:	73bb      	strb	r3, [r7, #14]

		uint32_t host_CRC = *((uint32_t *)(BL_Buffer + 2 + (data_length - 4)));
 800243e:	897b      	ldrh	r3, [r7, #10]
 8002440:	3b02      	subs	r3, #2
 8002442:	4a3a      	ldr	r2, [pc, #232]	; (800252c <Bootloader_Get_Command+0x138>)
 8002444:	4413      	add	r3, r2
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	607b      	str	r3, [r7, #4]
		CRC_ver_status = Bootloader_CRC_Verification(BL_Buffer, 3, host_CRC);
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	2103      	movs	r1, #3
 800244e:	4837      	ldr	r0, [pc, #220]	; (800252c <Bootloader_Get_Command+0x138>)
 8002450:	f000 fb32 	bl	8002ab8 <Bootloader_CRC_Verification>
 8002454:	4603      	mov	r3, r0
 8002456:	737b      	strb	r3, [r7, #13]
		CRC_ver_status = CRC_VERIFICATION_SUCCESS;
 8002458:	2301      	movs	r3, #1
 800245a:	737b      	strb	r3, [r7, #13]

		if(HAL_Status == HAL_OK && CRC_ver_status == CRC_VERIFICATION_SUCCESS)
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d15a      	bne.n	8002518 <Bootloader_Get_Command+0x124>
 8002462:	7b7b      	ldrb	r3, [r7, #13]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d157      	bne.n	8002518 <Bootloader_Get_Command+0x124>
		{
			switch(BL_Buffer[2])
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <Bootloader_Get_Command+0x138>)
 800246a:	789b      	ldrb	r3, [r3, #2]
 800246c:	3b10      	subs	r3, #16
 800246e:	2b09      	cmp	r3, #9
 8002470:	d850      	bhi.n	8002514 <Bootloader_Get_Command+0x120>
 8002472:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <Bootloader_Get_Command+0x84>)
 8002474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002478:	080024a1 	.word	0x080024a1
 800247c:	080024ad 	.word	0x080024ad
 8002480:	080024b9 	.word	0x080024b9
 8002484:	080024c5 	.word	0x080024c5
 8002488:	080024d1 	.word	0x080024d1
 800248c:	080024dd 	.word	0x080024dd
 8002490:	080024e9 	.word	0x080024e9
 8002494:	080024f5 	.word	0x080024f5
 8002498:	08002501 	.word	0x08002501
 800249c:	08002509 	.word	0x08002509
			{
				case BL_GET_VER_CMD:
					Bootloader_Get_Version(BL_Buffer);
 80024a0:	4822      	ldr	r0, [pc, #136]	; (800252c <Bootloader_Get_Command+0x138>)
 80024a2:	f000 f8b7 	bl	8002614 <Bootloader_Get_Version>
					bl_status = BL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
					break;
 80024aa:	e034      	b.n	8002516 <Bootloader_Get_Command+0x122>

				case BL_GET_HELP_CMD:
					Bootloader_Get_Help(BL_Buffer);
 80024ac:	481f      	ldr	r0, [pc, #124]	; (800252c <Bootloader_Get_Command+0x138>)
 80024ae:	f000 f8c5 	bl	800263c <Bootloader_Get_Help>
					bl_status = BL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
					break;
 80024b6:	e02e      	b.n	8002516 <Bootloader_Get_Command+0x122>

				case BL_GET_CID_CMD:
					Bootloader_Get_Chip_ID(BL_Buffer);
 80024b8:	481c      	ldr	r0, [pc, #112]	; (800252c <Bootloader_Get_Command+0x138>)
 80024ba:	f000 f8cf 	bl	800265c <Bootloader_Get_Chip_ID>
					bl_status = BL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
					break;
 80024c2:	e028      	b.n	8002516 <Bootloader_Get_Command+0x122>

				case BL_GET_RDP_STATUS_CMD:
					Bootloader_Get_Read_Protection_Status(BL_Buffer);
 80024c4:	4819      	ldr	r0, [pc, #100]	; (800252c <Bootloader_Get_Command+0x138>)
 80024c6:	f000 f8e3 	bl	8002690 <Bootloader_Get_Read_Protection_Status>
					bl_status = BL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
					break;
 80024ce:	e022      	b.n	8002516 <Bootloader_Get_Command+0x122>

				case BL_GO_TO_ADDR_CMD:
					bl_status = Bootloader_Go_TO_Address(BL_Buffer);
 80024d0:	4816      	ldr	r0, [pc, #88]	; (800252c <Bootloader_Get_Command+0x138>)
 80024d2:	f000 f8f4 	bl	80026be <Bootloader_Go_TO_Address>
 80024d6:	4603      	mov	r3, r0
 80024d8:	73fb      	strb	r3, [r7, #15]
					break;
 80024da:	e01c      	b.n	8002516 <Bootloader_Get_Command+0x122>

				case BL_FLASH_ERASE_CMD:
					bl_status = Bootloader_Erase_Flash(BL_Buffer);
 80024dc:	4813      	ldr	r0, [pc, #76]	; (800252c <Bootloader_Get_Command+0x138>)
 80024de:	f000 f96d 	bl	80027bc <Bootloader_Erase_Flash>
 80024e2:	4603      	mov	r3, r0
 80024e4:	73fb      	strb	r3, [r7, #15]
					break;
 80024e6:	e016      	b.n	8002516 <Bootloader_Get_Command+0x122>

				case BL_MEM_WRITE_CMD:
					bl_status = Bootloader_Write_Memory(BL_Buffer);
 80024e8:	4810      	ldr	r0, [pc, #64]	; (800252c <Bootloader_Get_Command+0x138>)
 80024ea:	f000 fa0d 	bl	8002908 <Bootloader_Write_Memory>
 80024ee:	4603      	mov	r3, r0
 80024f0:	73fb      	strb	r3, [r7, #15]
					break;
 80024f2:	e010      	b.n	8002516 <Bootloader_Get_Command+0x122>

				case BL_MEM_READ_CMD:
					bl_status = Bootloader_Read_Memory(BL_Buffer);
 80024f4:	480d      	ldr	r0, [pc, #52]	; (800252c <Bootloader_Get_Command+0x138>)
 80024f6:	f000 fa38 	bl	800296a <Bootloader_Read_Memory>
 80024fa:	4603      	mov	r3, r0
 80024fc:	73fb      	strb	r3, [r7, #15]
					break;
 80024fe:	e00a      	b.n	8002516 <Bootloader_Get_Command+0x122>

				case BL_JUMP_TO_MAIN:
					Jump_To_App_Main(BL_Buffer);
 8002500:	480a      	ldr	r0, [pc, #40]	; (800252c <Bootloader_Get_Command+0x138>)
 8002502:	f000 f9dd 	bl	80028c0 <Jump_To_App_Main>
					break;
 8002506:	e006      	b.n	8002516 <Bootloader_Get_Command+0x122>

				case BL_CHANGE_RDP_Level_CMD:
					bl_status = Bootloader_Set_Read_Protection_Level(BL_Buffer);
 8002508:	4808      	ldr	r0, [pc, #32]	; (800252c <Bootloader_Get_Command+0x138>)
 800250a:	f000 fa57 	bl	80029bc <Bootloader_Set_Read_Protection_Level>
 800250e:	4603      	mov	r3, r0
 8002510:	73fb      	strb	r3, [r7, #15]
					break;
 8002512:	e000      	b.n	8002516 <Bootloader_Get_Command+0x122>
				default:
					break;
 8002514:	bf00      	nop
			switch(BL_Buffer[2])
 8002516:	e004      	b.n	8002522 <Bootloader_Get_Command+0x12e>
			}
		}else {
			#if (BUILD_TYPE == BUILD_TYPE_DEBUG)
				Bootloader_Write_Message("bl could not receive the command");
			#endif
				Bootloader_Send_NAck();
 8002518:	f000 f842 	bl	80025a0 <Bootloader_Send_NAck>
 800251c:	e001      	b.n	8002522 <Bootloader_Get_Command+0x12e>
		}
	}else {
		#if (BUILD_TYPE == BUILD_TYPE_DEBUG)
			Bootloader_Write_Message("bl could not receive the command length");
		#endif
		Bootloader_Send_NAck();
 800251e:	f000 f83f 	bl	80025a0 <Bootloader_Send_NAck>
	}

	return bl_status;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200000a8 	.word	0x200000a8
 8002530:	000186a0 	.word	0x000186a0
 8002534:	2000003c 	.word	0x2000003c
 8002538:	200000aa 	.word	0x200000aa

0800253c <Bootloader_Send_Data_To_Host>:
* @retval -     None
* Note -        Sends an initial byte indicating the length of the data followed by the actual data.
*               If the data pointer is NULL, only the length byte is sent.
*/
static void Bootloader_Send_Data_To_Host(uint8_t *data, uint8_t length)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(BL_UART, &length, 1, BL_MAX_TIMEOUT);
 8002548:	1cf9      	adds	r1, r7, #3
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <Bootloader_Send_Data_To_Host+0x34>)
 800254c:	2201      	movs	r2, #1
 800254e:	4809      	ldr	r0, [pc, #36]	; (8002574 <Bootloader_Send_Data_To_Host+0x38>)
 8002550:	f7ff fce4 	bl	8001f1c <HAL_UART_Transmit>
	if(data != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <Bootloader_Send_Data_To_Host+0x2c>
		HAL_UART_Transmit(BL_UART, data, length, BL_MAX_TIMEOUT);
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	b29a      	uxth	r2, r3
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <Bootloader_Send_Data_To_Host+0x34>)
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4804      	ldr	r0, [pc, #16]	; (8002574 <Bootloader_Send_Data_To_Host+0x38>)
 8002564:	f7ff fcda 	bl	8001f1c <HAL_UART_Transmit>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	000186a0 	.word	0x000186a0
 8002574:	2000003c 	.word	0x2000003c

08002578 <Bootloader_Send_Ack>:
* @param [out] - None
* @retval - None
* Note- The ACK signal indicates that the bootloader has successfully received and processed a command.
*/
static void Bootloader_Send_Ack()
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
	uint8_t ack = BL_ACK;
 800257e:	2301      	movs	r3, #1
 8002580:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_UART, &ack, 1, 100000);
 8002582:	1df9      	adds	r1, r7, #7
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <Bootloader_Send_Ack+0x20>)
 8002586:	2201      	movs	r2, #1
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <Bootloader_Send_Ack+0x24>)
 800258a:	f7ff fcc7 	bl	8001f1c <HAL_UART_Transmit>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	000186a0 	.word	0x000186a0
 800259c:	2000003c 	.word	0x2000003c

080025a0 <Bootloader_Send_NAck>:
* @param [out] - None
* @retval - None
* Note- The NACK signal indicates that the bootloader failed to process the received command.
*/
static void Bootloader_Send_NAck()
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_UART, &nack, 1, 100000);
 80025aa:	1df9      	adds	r1, r7, #7
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <Bootloader_Send_NAck+0x20>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	4804      	ldr	r0, [pc, #16]	; (80025c4 <Bootloader_Send_NAck+0x24>)
 80025b2:	f7ff fcb3 	bl	8001f1c <HAL_UART_Transmit>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	000186a0 	.word	0x000186a0
 80025c4:	2000003c 	.word	0x2000003c

080025c8 <isValidAddress>:
* @param [out] - uint8_t: Returns 1 if the address is valid, 0 otherwise
* @retval - uint8_t (1 for valid, 0 for invalid)
* Note- Used to verify if the memory address is in the valid flash or SRAM range.
*/
static uint8_t isValidAddress(uint32_t address)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	uint8_t isValid = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
	if(address >= FLASH_BASE && address <= (FLASH_BASE + FLASH_SIZE))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025da:	d306      	bcc.n	80025ea <isValidAddress+0x22>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a0b      	ldr	r2, [pc, #44]	; (800260c <isValidAddress+0x44>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d802      	bhi.n	80025ea <isValidAddress+0x22>
	{
		isValid = 1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	e009      	b.n	80025fe <isValidAddress+0x36>
	}else if(address >= SRAM_BASE && address <= (SRAM_BASE + SRAM_SIZE))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025f0:	d305      	bcc.n	80025fe <isValidAddress+0x36>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a06      	ldr	r2, [pc, #24]	; (8002610 <isValidAddress+0x48>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d801      	bhi.n	80025fe <isValidAddress+0x36>
	{
		isValid = 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
	}

	return isValid;
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	08020000 	.word	0x08020000
 8002610:	20005000 	.word	0x20005000

08002614 <Bootloader_Get_Version>:
* @param [out] - None
* @retval - None
* Note- Sends an array containing the vendor ID, major, minor, and patch version to the host.
*/
static void Bootloader_Get_Version(uint8_t *data)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	uint8_t bl_version[] = {BL_VENDOR_ID, BL_SW_MAJOR_VERSION, BL_SW_MINOR_VERSION, BL_SW_PATCH_VERSION};
 800261c:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8002620:	60fb      	str	r3, [r7, #12]
	Bootloader_Send_Ack();
 8002622:	f7ff ffa9 	bl	8002578 <Bootloader_Send_Ack>
	Bootloader_Send_Data_To_Host(bl_version, sizeof(bl_version));
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	2104      	movs	r1, #4
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff85 	bl	800253c <Bootloader_Send_Data_To_Host>
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <Bootloader_Get_Help>:
* @param [out] - None
* @retval - None
* Note- Sends an array of supported command codes to the host.
*/
static void Bootloader_Get_Help(uint8_t *data)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	Bootloader_Send_Ack();
 8002644:	f7ff ff98 	bl	8002578 <Bootloader_Send_Ack>
	Bootloader_Send_Data_To_Host(BL_Commands, sizeof(BL_Commands));
 8002648:	210a      	movs	r1, #10
 800264a:	4803      	ldr	r0, [pc, #12]	; (8002658 <Bootloader_Get_Help+0x1c>)
 800264c:	f7ff ff76 	bl	800253c <Bootloader_Send_Data_To_Host>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	2000000c 	.word	0x2000000c

0800265c <Bootloader_Get_Chip_ID>:
* @param [out] - None
* @retval - None
* Note- Retrieves the MCU ID code from the IDCODE register and sends it to the host.
*/
static void Bootloader_Get_Chip_ID(uint8_t *data)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	uint16_t MCU_ID_Code = (uint16_t)(DBGMCU->IDCODE & 0x7FF);
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <Bootloader_Get_Chip_ID+0x30>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800266e:	b29b      	uxth	r3, r3
 8002670:	81fb      	strh	r3, [r7, #14]

	Bootloader_Send_Ack();
 8002672:	f7ff ff81 	bl	8002578 <Bootloader_Send_Ack>
	Bootloader_Send_Data_To_Host((uint8_t *)&MCU_ID_Code, sizeof(MCU_ID_Code));
 8002676:	f107 030e 	add.w	r3, r7, #14
 800267a:	2102      	movs	r1, #2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff5d 	bl	800253c <Bootloader_Send_Data_To_Host>
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	e0042000 	.word	0xe0042000

08002690 <Bootloader_Get_Read_Protection_Status>:
* @param [out] - None
* @retval - None
* Note- The RDP level is obtained using HAL_FLASHEx_OBGetConfig and is sent to the host.
*/
static void Bootloader_Get_Read_Protection_Status(uint8_t *data)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	FLASH_OBProgramInitTypeDef pOBInit;

	HAL_FLASHEx_OBGetConfig(&pOBInit);
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fb33 	bl	8000d08 <HAL_FLASHEx_OBGetConfig>

	uint8_t RDP_level = pOBInit.RDPLevel;
 80026a2:	7f3b      	ldrb	r3, [r7, #28]
 80026a4:	72fb      	strb	r3, [r7, #11]

	Bootloader_Send_Ack();
 80026a6:	f7ff ff67 	bl	8002578 <Bootloader_Send_Ack>
	Bootloader_Send_Data_To_Host(&RDP_level, sizeof(RDP_level));
 80026aa:	f107 030b 	add.w	r3, r7, #11
 80026ae:	2101      	movs	r1, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff43 	bl	800253c <Bootloader_Send_Data_To_Host>
}
 80026b6:	bf00      	nop
 80026b8:	3728      	adds	r7, #40	; 0x28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <Bootloader_Go_TO_Address>:
* @param [out] - BL_Status: BL_OK if address is valid, BL_Error otherwise
* @retval - BL_Status (Bootloader operation status)
* Note- Verifies if the address is valid before jumping, sends ACK or NACK accordingly.
*/
static BL_Status Bootloader_Go_TO_Address(uint8_t *data)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	BL_Status bl_status = BL_Error;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
	uint32_t address = *((uint32_t *)(data + 3));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8d3 3003 	ldr.w	r3, [r3, #3]
 80026d0:	613b      	str	r3, [r7, #16]

	uint8_t validAddress = isValidAddress(address);
 80026d2:	6938      	ldr	r0, [r7, #16]
 80026d4:	f7ff ff78 	bl	80025c8 <isValidAddress>
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]

	if(validAddress)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <Bootloader_Go_TO_Address+0x3c>
	{
		Bootloader_Send_Ack();
 80026e2:	f7ff ff49 	bl	8002578 <Bootloader_Send_Ack>
		Bootloader_Send_Data_To_Host(NULL, 0);
 80026e6:	2100      	movs	r1, #0
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff ff27 	bl	800253c <Bootloader_Send_Data_To_Host>

		PFunc function = (void *)(address+1);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	3301      	adds	r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]

		function();
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4798      	blx	r3
 80026f8:	e001      	b.n	80026fe <Bootloader_Go_TO_Address+0x40>
	}else
	{
	    Bootloader_Send_NAck();
 80026fa:	f7ff ff51 	bl	80025a0 <Bootloader_Send_NAck>
	}
	return bl_status;
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <Flash_Memory_Erase_Pages>:
* @param [out] - uint8_t: Erase status (PAGE_ERASE_SUCCESS or PAGE_ERASE_ERROR)
* @retval - uint8_t (Erase status)
* Note- Unlocks flash, erases the specified pages, and locks flash again.
*/
static uint8_t Flash_Memory_Erase_Pages(uint8_t start_page, uint8_t number_of_pages)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	4613      	mov	r3, r2
 8002716:	71bb      	strb	r3, [r7, #6]
	uint8_t erase_status = PAGE_ERASE_SUCCESS;
 8002718:	2301      	movs	r3, #1
 800271a:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	77bb      	strb	r3, [r7, #30]

	if(start_page < NUM_OF_PAGES - 1)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	2b7e      	cmp	r3, #126	; 0x7e
 8002724:	d843      	bhi.n	80027ae <Flash_Memory_Erase_Pages+0xa6>
	{
		if(start_page + number_of_pages > NUM_OF_PAGES)
 8002726:	79fa      	ldrb	r2, [r7, #7]
 8002728:	79bb      	ldrb	r3, [r7, #6]
 800272a:	4413      	add	r3, r2
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	dd06      	ble.n	800273e <Flash_Memory_Erase_Pages+0x36>
		{
			number_of_pages = NUM_OF_PAGES - start_page;
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8002736:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800273a:	3380      	adds	r3, #128	; 0x80
 800273c:	71bb      	strb	r3, [r7, #6]
		}

		HAL_Status = HAL_FLASH_Unlock();
 800273e:	f7fe f89f 	bl	8000880 <HAL_FLASH_Unlock>
 8002742:	4603      	mov	r3, r0
 8002744:	77bb      	strb	r3, [r7, #30]
		if(HAL_Status == HAL_OK)
 8002746:	7fbb      	ldrb	r3, [r7, #30]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d12d      	bne.n	80027a8 <Flash_Memory_Erase_Pages+0xa0>
		{
			FLASH_EraseInitTypeDef pEraseInit;
			pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
			pEraseInit.Banks = FLASH_BANK_1;
 8002750:	2301      	movs	r3, #1
 8002752:	613b      	str	r3, [r7, #16]
			pEraseInit.PageAddress = FLASH_BASE + start_page * PAGESIZE;
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	617b      	str	r3, [r7, #20]
			pEraseInit.NbPages = number_of_pages;
 800275e:	79bb      	ldrb	r3, [r7, #6]
 8002760:	61bb      	str	r3, [r7, #24]

			uint32_t PageError;
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8002762:	f107 0208 	add.w	r2, r7, #8
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe f9a1 	bl	8000ab4 <HAL_FLASHEx_Erase>
 8002772:	4603      	mov	r3, r0
 8002774:	77bb      	strb	r3, [r7, #30]

			if(HAL_Status == HAL_OK && PageError == 0xFFFFFFFF)
 8002776:	7fbb      	ldrb	r3, [r7, #30]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d112      	bne.n	80027a2 <Flash_Memory_Erase_Pages+0x9a>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002782:	d10e      	bne.n	80027a2 <Flash_Memory_Erase_Pages+0x9a>
			{
				HAL_Status = HAL_FLASH_Lock();
 8002784:	f7fe f8a2 	bl	80008cc <HAL_FLASH_Lock>
 8002788:	4603      	mov	r3, r0
 800278a:	77bb      	strb	r3, [r7, #30]
				while(HAL_Status == HAL_ERROR)
 800278c:	e005      	b.n	800279a <Flash_Memory_Erase_Pages+0x92>
				{
					HAL_Status = HAL_FLASH_Lock();
 800278e:	f7fe f89d 	bl	80008cc <HAL_FLASH_Lock>
 8002792:	4603      	mov	r3, r0
 8002794:	77bb      	strb	r3, [r7, #30]
					erase_status = PAGE_ERASE_ERROR;
 8002796:	2300      	movs	r3, #0
 8002798:	77fb      	strb	r3, [r7, #31]
				while(HAL_Status == HAL_ERROR)
 800279a:	7fbb      	ldrb	r3, [r7, #30]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d0f6      	beq.n	800278e <Flash_Memory_Erase_Pages+0x86>
			if(HAL_Status == HAL_OK && PageError == 0xFFFFFFFF)
 80027a0:	e007      	b.n	80027b2 <Flash_Memory_Erase_Pages+0xaa>
				}
			}else
			{
				erase_status = PAGE_ERASE_ERROR;
 80027a2:	2300      	movs	r3, #0
 80027a4:	77fb      	strb	r3, [r7, #31]
 80027a6:	e004      	b.n	80027b2 <Flash_Memory_Erase_Pages+0xaa>
			}
		}else
		{
			erase_status = PAGE_ERASE_ERROR;
 80027a8:	2300      	movs	r3, #0
 80027aa:	77fb      	strb	r3, [r7, #31]
 80027ac:	e001      	b.n	80027b2 <Flash_Memory_Erase_Pages+0xaa>
		}
	}else
	{
		erase_status = PAGE_ERASE_ERROR;
 80027ae:	2300      	movs	r3, #0
 80027b0:	77fb      	strb	r3, [r7, #31]
	}

	return erase_status;
 80027b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <Bootloader_Erase_Flash>:
* @param [out] - BL_Status: BL_OK if successful, BL_Error otherwise
* @retval - BL_Status (Bootloader operation status)
* Note- Sends an ACK or NACK depending on the success of the erase operation.
*/
static BL_Status Bootloader_Erase_Flash(uint8_t *data)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
		BL_Status bl_status = BL_Error;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
		uint8_t start_page = data[3];
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	78db      	ldrb	r3, [r3, #3]
 80027cc:	73bb      	strb	r3, [r7, #14]
		uint8_t number_of_pages = data[4];
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	791b      	ldrb	r3, [r3, #4]
 80027d2:	737b      	strb	r3, [r7, #13]

		uint8_t erase_status = Flash_Memory_Erase_Pages(start_page, number_of_pages);
 80027d4:	7b7a      	ldrb	r2, [r7, #13]
 80027d6:	7bbb      	ldrb	r3, [r7, #14]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff94 	bl	8002708 <Flash_Memory_Erase_Pages>
 80027e0:	4603      	mov	r3, r0
 80027e2:	733b      	strb	r3, [r7, #12]

		if(erase_status == PAGE_ERASE_SUCCESS)
 80027e4:	7b3b      	ldrb	r3, [r7, #12]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <Bootloader_Erase_Flash+0x32>
		{
			bl_status = BL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
		}

		if(bl_status == BL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <Bootloader_Erase_Flash+0x46>
		{
			Bootloader_Send_Ack();
 80027f4:	f7ff fec0 	bl	8002578 <Bootloader_Send_Ack>
			Bootloader_Send_Data_To_Host(NULL, 0);
 80027f8:	2100      	movs	r1, #0
 80027fa:	2000      	movs	r0, #0
 80027fc:	f7ff fe9e 	bl	800253c <Bootloader_Send_Data_To_Host>
 8002800:	e001      	b.n	8002806 <Bootloader_Erase_Flash+0x4a>
		}else
		{
			Bootloader_Send_NAck();
 8002802:	f7ff fecd 	bl	80025a0 <Bootloader_Send_NAck>
		}

		return bl_status;
 8002806:	7bfb      	ldrb	r3, [r7, #15]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <Flash_Memory_Write_Page>:
* @param [out] - uint8_t: Write status (FLASH_WRITE_SUCCESS or FLASH_WRITE_ERROR)
* @retval - uint8_t (Write status)
* Note- Unlocks flash, writes the data to the specified page, and locks flash again.
*/
static uint8_t Flash_Memory_Write_Page(uint8_t page_number, uint16_t payload_length, uint8_t *payload)
{
 8002810:	b5b0      	push	{r4, r5, r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	603a      	str	r2, [r7, #0]
 800281a:	71fb      	strb	r3, [r7, #7]
 800281c:	460b      	mov	r3, r1
 800281e:	80bb      	strh	r3, [r7, #4]
	uint8_t Flash_Write_Status = FLASH_WRITE_SUCCESS;
 8002820:	2301      	movs	r3, #1
 8002822:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	74fb      	strb	r3, [r7, #19]

	Flash_Memory_Erase_Pages(page_number, 1);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff6b 	bl	8002708 <Flash_Memory_Erase_Pages>
	uint32_t address = FLASH_BASE + page_number * PAGESIZE;
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002838:	029b      	lsls	r3, r3, #10
 800283a:	60fb      	str	r3, [r7, #12]

	HAL_Status = HAL_FLASH_Unlock();
 800283c:	f7fe f820 	bl	8000880 <HAL_FLASH_Unlock>
 8002840:	4603      	mov	r3, r0
 8002842:	74fb      	strb	r3, [r7, #19]
	if(HAL_Status == HAL_OK)
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d133      	bne.n	80028b2 <Flash_Memory_Write_Page+0xa2>
	{
		for(int i=0, j=0; i< (payload_length/4 + 1) && j < 1024; i++, j +=4)
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	e01e      	b.n	8002892 <Flash_Memory_Write_Page+0x82>
		{
			uint32_t curr_payload = *((uint32_t *) (payload + j));
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	4413      	add	r3, r2
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60bb      	str	r3, [r7, #8]
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + j, curr_payload);
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	18d1      	adds	r1, r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2200      	movs	r2, #0
 8002868:	461c      	mov	r4, r3
 800286a:	4615      	mov	r5, r2
 800286c:	4622      	mov	r2, r4
 800286e:	462b      	mov	r3, r5
 8002870:	2002      	movs	r0, #2
 8002872:	f7fd ff95 	bl	80007a0 <HAL_FLASH_Program>
 8002876:	4603      	mov	r3, r0
 8002878:	74fb      	strb	r3, [r7, #19]
			if(HAL_Status == HAL_ERROR)
 800287a:	7cfb      	ldrb	r3, [r7, #19]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <Flash_Memory_Write_Page+0x76>
			{
				Flash_Write_Status = FLASH_WRITE_ERROR;
 8002880:	2300      	movs	r3, #0
 8002882:	77fb      	strb	r3, [r7, #31]
				break;
 8002884:	e010      	b.n	80028a8 <Flash_Memory_Write_Page+0x98>
		for(int i=0, j=0; i< (payload_length/4 + 1) && j < 1024; i++, j +=4)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	3301      	adds	r3, #1
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3304      	adds	r3, #4
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	88bb      	ldrh	r3, [r7, #4]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	b29b      	uxth	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4293      	cmp	r3, r2
 800289e:	dc03      	bgt.n	80028a8 <Flash_Memory_Write_Page+0x98>
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a6:	dbd5      	blt.n	8002854 <Flash_Memory_Write_Page+0x44>
			}
		}

		HAL_Status = HAL_FLASH_Lock();
 80028a8:	f7fe f810 	bl	80008cc <HAL_FLASH_Lock>
 80028ac:	4603      	mov	r3, r0
 80028ae:	74fb      	strb	r3, [r7, #19]
 80028b0:	e001      	b.n	80028b6 <Flash_Memory_Write_Page+0xa6>
	}else
	{
		Flash_Write_Status = FLASH_WRITE_ERROR;
 80028b2:	2300      	movs	r3, #0
 80028b4:	77fb      	strb	r3, [r7, #31]
	}

	return Flash_Write_Status;
 80028b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bdb0      	pop	{r4, r5, r7, pc}

080028c0 <Jump_To_App_Main>:
* @param [out] - None
* @retval - None
* Note- Configures the vector table and resets the stack pointer before jumping to the main application.
*/
static void Jump_To_App_Main(uint8_t *data)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
    uint8_t page_number = data[3];
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	78db      	ldrb	r3, [r3, #3]
 80028cc:	75fb      	strb	r3, [r7, #23]
    uint32_t address = FLASH_BASE + page_number * PAGESIZE;
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80028d4:	029b      	lsls	r3, r3, #10
 80028d6:	613b      	str	r3, [r7, #16]

    HAL_RCC_DeInit();
 80028d8:	f7fe fe26 	bl	8001528 <HAL_RCC_DeInit>

    SCB->VTOR = address;
 80028dc:	4a09      	ldr	r2, [pc, #36]	; (8002904 <Jump_To_App_Main+0x44>)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	6093      	str	r3, [r2, #8]

    __set_MSP(*(volatile uint32_t*)address);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f383 8808 	msr	MSP, r3
}
 80028ee:	bf00      	nop

    PFunc reset_handler = (PFunc)(*(volatile uint32_t*)(address + 4));
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	3304      	adds	r3, #4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]
    reset_handler();
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4798      	blx	r3
}
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <Bootloader_Write_Memory>:
* @param [out] - BL_Status: BL_OK if successful, BL_Error otherwise
* @retval - BL_Status (Bootloader operation status)
* Note- Sends an ACK or NACK based on the success of the write operation.
*/
static BL_Status Bootloader_Write_Memory(uint8_t *data)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	BL_Status bl_status = BL_Error;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
	uint8_t page_number = data[3];
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	78db      	ldrb	r3, [r3, #3]
 8002918:	73bb      	strb	r3, [r7, #14]

	uint16_t payload_length = *((uint16_t *)(data + 4));;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	889b      	ldrh	r3, [r3, #4]
 800291e:	817b      	strh	r3, [r7, #10]

	if(page_number >=0 && page_number <= 127)
 8002920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db0d      	blt.n	8002944 <Bootloader_Write_Memory+0x3c>
	{
		uint8_t write_status = Flash_Memory_Write_Page(page_number, payload_length, data + 6);
 8002928:	8979      	ldrh	r1, [r7, #10]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	1d9a      	adds	r2, r3, #6
 800292e:	7bbb      	ldrb	r3, [r7, #14]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff6d 	bl	8002810 <Flash_Memory_Write_Page>
 8002936:	4603      	mov	r3, r0
 8002938:	737b      	strb	r3, [r7, #13]

		if(write_status == FLASH_WRITE_SUCCESS)
 800293a:	7b7b      	ldrb	r3, [r7, #13]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <Bootloader_Write_Memory+0x3c>
		{
			bl_status = BL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
		}
	}

	if(bl_status == BL_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d108      	bne.n	800295c <Bootloader_Write_Memory+0x54>
	{
		Bootloader_Send_Ack();
 800294a:	f7ff fe15 	bl	8002578 <Bootloader_Send_Ack>
		Bootloader_Send_Data_To_Host((uint8_t *) &payload_length, 2);
 800294e:	f107 030a 	add.w	r3, r7, #10
 8002952:	2102      	movs	r1, #2
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fdf1 	bl	800253c <Bootloader_Send_Data_To_Host>
 800295a:	e001      	b.n	8002960 <Bootloader_Write_Memory+0x58>
	}else
	{
		Bootloader_Send_NAck();
 800295c:	f7ff fe20 	bl	80025a0 <Bootloader_Send_NAck>
	}

	return bl_status;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <Bootloader_Read_Memory>:
* @param [out] - BL_Status: BL_OK if successful, BL_Error otherwise
* @retval - BL_Status (Bootloader operation status)
* Note- Sends the requested data to the host if the address is valid, otherwise sends a NACK.
*/
static BL_Status Bootloader_Read_Memory(uint8_t *data)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
	BL_Status bl_status = BL_Error;
 8002972:	2301      	movs	r3, #1
 8002974:	75fb      	strb	r3, [r7, #23]
	uint32_t address = *((uint32_t *)(data+3));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8d3 3003 	ldr.w	r3, [r3, #3]
 800297c:	613b      	str	r3, [r7, #16]
	uint32_t number_of_bytes = *((uint32_t *)(data+7));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8002984:	60fb      	str	r3, [r7, #12]

	if(isValidAddress(address))
 8002986:	6938      	ldr	r0, [r7, #16]
 8002988:	f7ff fe1e 	bl	80025c8 <isValidAddress>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <Bootloader_Read_Memory+0x40>
	{
		Bootloader_Send_Ack();
 8002992:	f7ff fdf1 	bl	8002578 <Bootloader_Send_Ack>
		Bootloader_Send_Data_To_Host((uint8_t *)address, number_of_bytes);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fdcc 	bl	800253c <Bootloader_Send_Data_To_Host>
		bl_status = BL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	75fb      	strb	r3, [r7, #23]
 80029a8:	e003      	b.n	80029b2 <Bootloader_Read_Memory+0x48>
	}else {
		Bootloader_Send_NAck();
 80029aa:	f7ff fdf9 	bl	80025a0 <Bootloader_Send_NAck>
		bl_status = BL_Error;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
	}

	return bl_status;
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <Bootloader_Set_Read_Protection_Level>:
* @retval - BL_Status (Bootloader operation status)
* Note- The RDP level is set using HAL_FLASHEx_OBProgram. Sends an ACK or NACK based on the result.
*/

static BL_Status Bootloader_Set_Read_Protection_Level(uint8_t *data)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	uint8_t RDP_level = data[3];
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	78db      	ldrb	r3, [r3, #3]
 80029c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	BL_Status bl_status = BL_Error;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	FLASH_OBProgramInitTypeDef pOBInit;

	if(RDP_level == OB_RDP_LEVEL_0 || RDP_level == OB_RDP_LEVEL_1)
 80029d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029dc:	2ba5      	cmp	r3, #165	; 0xa5
 80029de:	d003      	beq.n	80029e8 <Bootloader_Set_Read_Protection_Level+0x2c>
 80029e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d14f      	bne.n	8002a88 <Bootloader_Set_Read_Protection_Level+0xcc>
	{
		HAL_FLASHEx_OBGetConfig(&pOBInit);
 80029e8:	f107 0308 	add.w	r3, r7, #8
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe f98b 	bl	8000d08 <HAL_FLASHEx_OBGetConfig>
		pOBInit.RDPLevel = RDP_level;
 80029f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029f6:	763b      	strb	r3, [r7, #24]

		HAL_Status = HAL_FLASH_Unlock();
 80029f8:	f7fd ff42 	bl	8000880 <HAL_FLASH_Unlock>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if(HAL_Status == HAL_OK)
 8002a02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d13a      	bne.n	8002a80 <Bootloader_Set_Read_Protection_Level+0xc4>
		{
			HAL_Status = HAL_FLASH_OB_Unlock();
 8002a0a:	f7fd ff6f 	bl	80008ec <HAL_FLASH_OB_Unlock>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if(HAL_Status == HAL_OK)
 8002a14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d12d      	bne.n	8002a78 <Bootloader_Set_Read_Protection_Level+0xbc>
			{
				HAL_Status = HAL_FLASHEx_OBProgram(&pOBInit);
 8002a1c:	f107 0308 	add.w	r3, r7, #8
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe f8f5 	bl	8000c10 <HAL_FLASHEx_OBProgram>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				if(HAL_Status == HAL_OK)
 8002a2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d11d      	bne.n	8002a70 <Bootloader_Set_Read_Protection_Level+0xb4>
				{
					HAL_Status = HAL_FLASH_OB_Lock();
 8002a34:	f7fd ff76 	bl	8000924 <HAL_FLASH_OB_Lock>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					if(HAL_Status == HAL_OK)
 8002a3e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d110      	bne.n	8002a68 <Bootloader_Set_Read_Protection_Level+0xac>
					{
						HAL_Status = HAL_FLASH_Lock();
 8002a46:	f7fd ff41 	bl	80008cc <HAL_FLASH_Lock>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						if(HAL_Status == HAL_OK)
 8002a50:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d103      	bne.n	8002a60 <Bootloader_Set_Read_Protection_Level+0xa4>
						{
							bl_status = BL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(HAL_Status == HAL_OK)
 8002a5e:	e016      	b.n	8002a8e <Bootloader_Set_Read_Protection_Level+0xd2>
						}else
						{
							#if (BUILD_TYPE == BUILD_TYPE_DEBUG)
								Bootloader_Write_Message("bl flash lock failed");
							#endif
							bl_status = BL_Error;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(HAL_Status == HAL_OK)
 8002a66:	e012      	b.n	8002a8e <Bootloader_Set_Read_Protection_Level+0xd2>
					}else
					{
						#if (BUILD_TYPE == BUILD_TYPE_DEBUG)
							Bootloader_Write_Message("bl flash option byte lock failed");
						#endif
						bl_status = BL_Error;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(HAL_Status == HAL_OK)
 8002a6e:	e00e      	b.n	8002a8e <Bootloader_Set_Read_Protection_Level+0xd2>
				}else
				{
					#if (BUILD_TYPE == BUILD_TYPE_DEBUG)
						Bootloader_Write_Message("bl program flash options failed");
					#endif
					bl_status = BL_Error;
 8002a70:	2301      	movs	r3, #1
 8002a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(HAL_Status == HAL_OK)
 8002a76:	e00a      	b.n	8002a8e <Bootloader_Set_Read_Protection_Level+0xd2>
			}else
			{
				#if (BUILD_TYPE == BUILD_TYPE_DEBUG)
					Bootloader_Write_Message("bl flash options unlock failed");
				#endif
				bl_status = BL_Error;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(HAL_Status == HAL_OK)
 8002a7e:	e006      	b.n	8002a8e <Bootloader_Set_Read_Protection_Level+0xd2>
		}else
		{
			#if (BUILD_TYPE == BUILD_TYPE_DEBUG)
				Bootloader_Write_Message("bl flash unlock failed");
			#endif
			bl_status = BL_Error;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(HAL_Status == HAL_OK)
 8002a86:	e002      	b.n	8002a8e <Bootloader_Set_Read_Protection_Level+0xd2>
		}
	}else {
		bl_status = BL_Error;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	if(bl_status == BL_OK)
 8002a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d108      	bne.n	8002aa8 <Bootloader_Set_Read_Protection_Level+0xec>
	{
		Bootloader_Send_Ack();
 8002a96:	f7ff fd6f 	bl	8002578 <Bootloader_Send_Ack>
		Bootloader_Send_Data_To_Host(NULL, 0);
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7ff fd4d 	bl	800253c <Bootloader_Send_Data_To_Host>

		// force the reload of the options bytes
		HAL_FLASH_OB_Launch();
 8002aa2:	f7fd ff4f 	bl	8000944 <HAL_FLASH_OB_Launch>
 8002aa6:	e001      	b.n	8002aac <Bootloader_Set_Read_Protection_Level+0xf0>
	}else
	{
		Bootloader_Send_NAck();
 8002aa8:	f7ff fd7a 	bl	80025a0 <Bootloader_Send_NAck>
	}
	return bl_status;
 8002aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3728      	adds	r7, #40	; 0x28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <Bootloader_CRC_Verification>:


static uint8_t Bootloader_CRC_Verification(uint8_t *pData, uint16_t data_length, uint32_t host_CRC)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	817b      	strh	r3, [r7, #10]
	uint8_t CRC_ver_status = CRC_VERIFICATION_FAILED;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
	uint8_t data_counter = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]

	for(data_counter = 0; data_counter < data_length; data_counter++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	75fb      	strb	r3, [r7, #23]
 8002ad6:	e00f      	b.n	8002af8 <Bootloader_CRC_Verification+0x40>
	{
		uint32_t data = (uint32_t)pData[data_counter];
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	613b      	str	r3, [r7, #16]
		MCU_CRC = HAL_CRC_Accumulate(&hcrc, &data, 1);
 8002ae2:	f107 0310 	add.w	r3, r7, #16
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4811      	ldr	r0, [pc, #68]	; (8002b30 <Bootloader_CRC_Verification+0x78>)
 8002aec:	f7fd fe2d 	bl	800074a <HAL_CRC_Accumulate>
 8002af0:	61b8      	str	r0, [r7, #24]
	for(data_counter = 0; data_counter < data_length; data_counter++)
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
 8002af4:	3301      	adds	r3, #1
 8002af6:	75fb      	strb	r3, [r7, #23]
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	897a      	ldrh	r2, [r7, #10]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d8ea      	bhi.n	8002ad8 <Bootloader_CRC_Verification+0x20>
	}

	__HAL_CRC_DR_RESET(&hcrc);
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <Bootloader_CRC_Verification+0x78>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <Bootloader_CRC_Verification+0x78>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	609a      	str	r2, [r3, #8]

	if(MCU_CRC == host_CRC)
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d102      	bne.n	8002b20 <Bootloader_CRC_Verification+0x68>
	{
		CRC_ver_status = CRC_VERIFICATION_SUCCESS;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e001      	b.n	8002b24 <Bootloader_CRC_Verification+0x6c>
	}
	else
	{
		CRC_ver_status = CRC_VERIFICATION_FAILED;
 8002b20:	2300      	movs	r3, #0
 8002b22:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_ver_status;
 8002b24:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000034 	.word	0x20000034

08002b34 <memset>:
 8002b34:	4603      	mov	r3, r0
 8002b36:	4402      	add	r2, r0
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d100      	bne.n	8002b3e <memset+0xa>
 8002b3c:	4770      	bx	lr
 8002b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b42:	e7f9      	b.n	8002b38 <memset+0x4>

08002b44 <__libc_init_array>:
 8002b44:	b570      	push	{r4, r5, r6, lr}
 8002b46:	2600      	movs	r6, #0
 8002b48:	4d0c      	ldr	r5, [pc, #48]	; (8002b7c <__libc_init_array+0x38>)
 8002b4a:	4c0d      	ldr	r4, [pc, #52]	; (8002b80 <__libc_init_array+0x3c>)
 8002b4c:	1b64      	subs	r4, r4, r5
 8002b4e:	10a4      	asrs	r4, r4, #2
 8002b50:	42a6      	cmp	r6, r4
 8002b52:	d109      	bne.n	8002b68 <__libc_init_array+0x24>
 8002b54:	f000 f81a 	bl	8002b8c <_init>
 8002b58:	2600      	movs	r6, #0
 8002b5a:	4d0a      	ldr	r5, [pc, #40]	; (8002b84 <__libc_init_array+0x40>)
 8002b5c:	4c0a      	ldr	r4, [pc, #40]	; (8002b88 <__libc_init_array+0x44>)
 8002b5e:	1b64      	subs	r4, r4, r5
 8002b60:	10a4      	asrs	r4, r4, #2
 8002b62:	42a6      	cmp	r6, r4
 8002b64:	d105      	bne.n	8002b72 <__libc_init_array+0x2e>
 8002b66:	bd70      	pop	{r4, r5, r6, pc}
 8002b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6c:	4798      	blx	r3
 8002b6e:	3601      	adds	r6, #1
 8002b70:	e7ee      	b.n	8002b50 <__libc_init_array+0xc>
 8002b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b76:	4798      	blx	r3
 8002b78:	3601      	adds	r6, #1
 8002b7a:	e7f2      	b.n	8002b62 <__libc_init_array+0x1e>
 8002b7c:	08002bd0 	.word	0x08002bd0
 8002b80:	08002bd0 	.word	0x08002bd0
 8002b84:	08002bd0 	.word	0x08002bd0
 8002b88:	08002bd4 	.word	0x08002bd4

08002b8c <_init>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	bf00      	nop
 8002b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b92:	bc08      	pop	{r3}
 8002b94:	469e      	mov	lr, r3
 8002b96:	4770      	bx	lr

08002b98 <_fini>:
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	bf00      	nop
 8002b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9e:	bc08      	pop	{r3}
 8002ba0:	469e      	mov	lr, r3
 8002ba2:	4770      	bx	lr
